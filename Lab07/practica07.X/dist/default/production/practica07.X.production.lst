

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Tue May 24 19:57:54 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F45K50
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text12,global,reloc=2,class=CODE,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,delta=1
    23                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    24                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    25                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    26                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    27  0000                     
    28                           ; Version 2.35
    29                           ; Generated 05/05/2021 GMT
    30                           ; 
    31                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution. Publication is not required when
    45                           ;        this file is used in an embedded application.
    46                           ; 
    47                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    48                           ;        software without specific prior written permission.
    49                           ; 
    50                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    51                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    52                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    53                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    54                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    55                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    56                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    57                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    58                           ; 
    59                           ; 
    60                           ; Code-generator required, PIC18F45K50 Definitions
    61                           ; 
    62                           ; SFR Addresses
    63  0000                     _TRISCbits	set	3988
    64  0000                     _TRISD	set	3989
    65  0000                     _INTCON2bits	set	4081
    66  0000                     _LATC	set	3979
    67  0000                     _ANSELB	set	3932
    68  0000                     _PORTB	set	3969
    69  0000                     _WPUB	set	3973
    70  0000                     _TRISB	set	3987
    71  0000                     _LATB	set	3978
    72  0000                     _LATD	set	3980
    73  0000                     _LATCbits	set	3979
    74  0000                     _OSCCON	set	4051
    75                           
    76                           	psect	smallconst
    77  000800                     __psmallconst:
    78                           	callstack 0
    79  000800  00                 	db	0
    80  000801                     STR_3:
    81  000801  2D                 	db	45
    82  000802  57                 	db	87	;'W'
    83  000803  72                 	db	114	;'r'
    84  000804  6F                 	db	111	;'o'
    85  000805  6E                 	db	110	;'n'
    86  000806  67                 	db	103	;'g'
    87  000807  20                 	db	32
    88  000808  46                 	db	70	;'F'
    89  000809  75                 	db	117	;'u'
    90  00080A  6E                 	db	110	;'n'
    91  00080B  63                 	db	99	;'c'
    92  00080C  74                 	db	116	;'t'
    93  00080D  69                 	db	105	;'i'
    94  00080E  6F                 	db	111	;'o'
    95  00080F  6E                 	db	110	;'n'
    96  000810  00                 	db	0
    97  000811                     STR_2:
    98  000811  2D                 	db	45
    99  000812  57                 	db	87	;'W'
   100  000813  72                 	db	114	;'r'
   101  000814  6F                 	db	111	;'o'
   102  000815  6E                 	db	110	;'n'
   103  000816  67                 	db	103	;'g'
   104  000817  20                 	db	32
   105  000818  49                 	db	73	;'I'
   106  000819  6E                 	db	110	;'n'
   107  00081A  70                 	db	112	;'p'
   108  00081B  75                 	db	117	;'u'
   109  00081C  74                 	db	116	;'t'
   110  00081D  00                 	db	0
   111  00081E                     STR_1:
   112  00081E  2D                 	db	45
   113  00081F  00                 	db	0
   114  000820  00                 	db	0	; dummy byte at the end
   115  0000                     
   116                           ; #config settings
   117                           
   118                           	psect	cinit
   119  000FF6                     __pcinit:
   120                           	callstack 0
   121  000FF6                     start_initialization:
   122                           	callstack 0
   123  000FF6                     __initialization:
   124                           	callstack 0
   125                           
   126                           ; Clear objects allocated to COMRAM (6 bytes)
   127  000FF6  6A1C               	clrf	(__pbssCOMRAM+5)& (0+255),c
   128  000FF8  6A1B               	clrf	(__pbssCOMRAM+4)& (0+255),c
   129  000FFA  6A1A               	clrf	(__pbssCOMRAM+3)& (0+255),c
   130  000FFC  6A19               	clrf	(__pbssCOMRAM+2)& (0+255),c
   131  000FFE  6A18               	clrf	(__pbssCOMRAM+1)& (0+255),c
   132  001000  6A17               	clrf	__pbssCOMRAM& (0+255),c
   133  001002                     end_of_initialization:
   134                           	callstack 0
   135  001002                     __end_of__initialization:
   136                           	callstack 0
   137  001002  0E00               	movlw	low (__Lmediumconst shr (0+16))
   138  001004  6EF8               	movwf	tblptru,c
   139  001006  0100               	movlb	0
   140  001008  EF11  F004         	goto	_main	;jump to C main() function
   141                           
   142                           	psect	bssCOMRAM
   143  000017                     __pbssCOMRAM:
   144                           	callstack 0
   145  000017                     _num2:
   146                           	callstack 0
   147  000017                     	ds	2
   148  000019                     _num1:
   149                           	callstack 0
   150  000019                     	ds	2
   151  00001B                     _oper:
   152                           	callstack 0
   153  00001B                     	ds	1
   154  00001C                     _key:
   155                           	callstack 0
   156  00001C                     	ds	1
   157                           
   158                           	psect	cstackCOMRAM
   159  000001                     __pcstackCOMRAM:
   160                           	callstack 0
   161  000001                     ??_key_scanner:
   162  000001                     ??_send_to_LCD:
   163  000001                     ?___wmul:
   164                           	callstack 0
   165  000001                     ?___awdiv:
   166                           	callstack 0
   167  000001                     LCD_cmd@cx:
   168                           	callstack 0
   169  000001                     ___wmul@multiplier:
   170                           	callstack 0
   171  000001                     ___awdiv@dividend:
   172                           	callstack 0
   173                           
   174                           ; 2 bytes @ 0x0
   175  000001                     	ds	1
   176  000002                     ??_LCD_init:
   177                           
   178                           ; 1 bytes @ 0x1
   179  000002                     	ds	1
   180  000003                     ??_key_get:
   181  000003                     send_to_LCD@xy:
   182                           	callstack 0
   183  000003                     ___wmul@multiplicand:
   184                           	callstack 0
   185  000003                     ___awdiv@divisor:
   186                           	callstack 0
   187                           
   188                           ; 2 bytes @ 0x2
   189  000003                     	ds	1
   190  000004                     write_string_LCD@s:
   191                           	callstack 0
   192                           
   193                           ; 2 bytes @ 0x3
   194  000004                     	ds	1
   195  000005                     ___awdiv@counter:
   196                           	callstack 0
   197  000005                     ___wmul@product:
   198                           	callstack 0
   199                           
   200                           ; 2 bytes @ 0x4
   201  000005                     	ds	1
   202  000006                     ___awdiv@sign:
   203                           	callstack 0
   204  000006                     disp_Error@numb:
   205                           	callstack 0
   206                           
   207                           ; 2 bytes @ 0x5
   208  000006                     	ds	1
   209  000007                     ___awdiv@quotient:
   210                           	callstack 0
   211                           
   212                           ; 2 bytes @ 0x6
   213  000007                     	ds	1
   214  000008                     ??_disp_Error:
   215                           
   216                           ; 1 bytes @ 0x7
   217  000008                     	ds	1
   218  000009                     disp_Res@numb:
   219                           	callstack 0
   220                           
   221                           ; 2 bytes @ 0x8
   222  000009                     	ds	1
   223  00000A                     ?_get_Num:
   224                           	callstack 0
   225  00000A                     get_Func@chf:
   226                           	callstack 0
   227                           
   228                           ; 1 bytes @ 0x9
   229  00000A                     	ds	1
   230  00000B                     disp_Res@UnitDigit:
   231                           	callstack 0
   232                           
   233                           ; 1 bytes @ 0xA
   234  00000B                     	ds	1
   235  00000C                     ??_get_Num:
   236  00000C                     disp_Res@TenthDigit:
   237                           	callstack 0
   238                           
   239                           ; 1 bytes @ 0xB
   240  00000C                     	ds	1
   241  00000D                     disp_Res@HundrethDigit:
   242                           	callstack 0
   243                           
   244                           ; 1 bytes @ 0xC
   245  00000D                     	ds	1
   246  00000E                     get_Num@ch:
   247                           	callstack 0
   248                           
   249                           ; 1 bytes @ 0xD
   250  00000E                     	ds	1
   251  00000F                     get_Num@num:
   252                           	callstack 0
   253                           
   254                           ; 2 bytes @ 0xE
   255  00000F                     	ds	2
   256  000011                     ??_main:
   257                           
   258                           ; 1 bytes @ 0x10
   259  000011                     	ds	2
   260  000013                     _main$871:
   261                           	callstack 0
   262                           
   263                           ; 2 bytes @ 0x12
   264  000013                     	ds	2
   265  000015                     _main$872:
   266                           	callstack 0
   267                           
   268                           ; 2 bytes @ 0x14
   269  000015                     	ds	2
   270                           
   271 ;;
   272 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   273 ;;
   274 ;; *************** function _main *****************
   275 ;; Defined at:
   276 ;;		line 23 in file "main.c"
   277 ;; Parameters:    Size  Location     Type
   278 ;;		None
   279 ;; Auto vars:     Size  Location     Type
   280 ;;		None
   281 ;; Return value:  Size  Location     Type
   282 ;;                  1    wreg      void 
   283 ;; Registers used:
   284 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   285 ;; Tracked objects:
   286 ;;		On entry : 0/0
   287 ;;		On exit  : 0/0
   288 ;;		Unchanged: 0/0
   289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   290 ;;      Params:         0       0       0       0       0       0       0       0       0
   291 ;;      Locals:         4       0       0       0       0       0       0       0       0
   292 ;;      Temps:          2       0       0       0       0       0       0       0       0
   293 ;;      Totals:         6       0       0       0       0       0       0       0       0
   294 ;;Total ram usage:        6 bytes
   295 ;; Hardware stack levels required when called: 4
   296 ;; This function calls:
   297 ;;		_LCD_cmd
   298 ;;		_LCD_init
   299 ;;		___awdiv
   300 ;;		___wmul
   301 ;;		_disp_Error
   302 ;;		_disp_Res
   303 ;;		_get_Func
   304 ;;		_get_Num
   305 ;;		_key_get
   306 ;;		_key_init
   307 ;;		_send_to_LCD
   308 ;; This function is called by:
   309 ;;		Startup code after reset
   310 ;; This function uses a non-reentrant model
   311 ;;
   312                           
   313                           	psect	text0
   314  000822                     __ptext0:
   315                           	callstack 0
   316  000822                     _main:
   317                           	callstack 27
   318  000822                     
   319                           ;main.c: 24:     OSCCON = 0x74;
   320  000822  0E74               	movlw	116
   321  000824  6ED3               	movwf	211,c	;volatile
   322  000826                     
   323                           ;main.c: 25:     LCD_init();
   324  000826  EC31  F007         	call	_LCD_init	;wreg free
   325  00082A                     
   326                           ;main.c: 26:     key_init();
   327  00082A  EC10  F008         	call	_key_init	;wreg free
   328  00082E                     l1800:
   329                           
   330                           ;main.c: 28:         key = key_get();
   331  00082E  EC9A  F007         	call	_key_get	;wreg free
   332  000832  6E1C               	movwf	_key^0,c
   333  000834                     
   334                           ;main.c: 29:         send_to_LCD(key);
   335  000834  501C               	movf	_key^0,w,c
   336  000836  ECD3  F007         	call	_send_to_LCD
   337  00083A                     
   338                           ;main.c: 30:         num1 = get_Num(key);
   339  00083A  501C               	movf	_key^0,w,c
   340  00083C  ECA5  F005         	call	_get_Num
   341  000840  C00A  F019         	movff	?_get_Num,_num1
   342  000844  C00B  F01A         	movff	?_get_Num+1,_num1+1
   343  000848                     
   344                           ;main.c: 31:         if (num1 != 13){
   345  000848  0E0D               	movlw	13
   346  00084A  1819               	xorwf	_num1^0,w,c
   347  00084C  101A               	iorwf	(_num1+1)^0,w,c
   348  00084E  B4D8               	btfsc	status,2,c
   349  000850  EF2C  F004         	goto	u381
   350  000854  EF2E  F004         	goto	u380
   351  000858                     u381:
   352  000858  EF17  F004         	goto	l1800
   353  00085C                     u380:
   354  00085C                     
   355                           ;main.c: 32:             key = key_get();
   356  00085C  EC9A  F007         	call	_key_get	;wreg free
   357  000860  6E1C               	movwf	_key^0,c
   358  000862                     
   359                           ;main.c: 33:             send_to_LCD(key);
   360  000862  501C               	movf	_key^0,w,c
   361  000864  ECD3  F007         	call	_send_to_LCD
   362  000868                     
   363                           ;main.c: 34:             oper = get_Func(key);
   364  000868  501C               	movf	_key^0,w,c
   365  00086A  ECF3  F006         	call	_get_Func
   366  00086E  6E1B               	movwf	_oper^0,c
   367  000870                     
   368                           ;main.c: 35:             if (oper != 'e'){
   369  000870  0E65               	movlw	101
   370  000872  181B               	xorwf	_oper^0,w,c
   371  000874  B4D8               	btfsc	status,2,c
   372  000876  EF3F  F004         	goto	u391
   373  00087A  EF41  F004         	goto	u390
   374  00087E                     u391:
   375  00087E  EF17  F004         	goto	l1800
   376  000882                     u390:
   377  000882                     
   378                           ;main.c: 36:                 key = key_get();
   379  000882  EC9A  F007         	call	_key_get	;wreg free
   380  000886  6E1C               	movwf	_key^0,c
   381  000888                     
   382                           ;main.c: 37:                 send_to_LCD(key);
   383  000888  501C               	movf	_key^0,w,c
   384  00088A  ECD3  F007         	call	_send_to_LCD
   385  00088E                     
   386                           ;main.c: 38:                 num2 = get_Num(key);
   387  00088E  501C               	movf	_key^0,w,c
   388  000890  ECA5  F005         	call	_get_Num
   389  000894  C00A  F017         	movff	?_get_Num,_num2
   390  000898  C00B  F018         	movff	?_get_Num+1,_num2+1
   391  00089C                     
   392                           ;main.c: 39:                 if (num2 != 13){
   393  00089C  0E0D               	movlw	13
   394  00089E  1817               	xorwf	_num2^0,w,c
   395  0008A0  1018               	iorwf	(_num2+1)^0,w,c
   396  0008A2  B4D8               	btfsc	status,2,c
   397  0008A4  EF56  F004         	goto	u401
   398  0008A8  EF58  F004         	goto	u400
   399  0008AC                     u401:
   400  0008AC  EF17  F004         	goto	l1800
   401  0008B0                     u400:
   402  0008B0                     
   403                           ;main.c: 40:                     key = key_get();
   404  0008B0  EC9A  F007         	call	_key_get	;wreg free
   405  0008B4  6E1C               	movwf	_key^0,c
   406  0008B6                     
   407                           ;main.c: 41:                     send_to_LCD(key);
   408  0008B6  501C               	movf	_key^0,w,c
   409  0008B8  ECD3  F007         	call	_send_to_LCD
   410  0008BC                     
   411                           ;main.c: 42:                     if (key == '='){
   412  0008BC  0E3D               	movlw	61
   413  0008BE  181C               	xorwf	_key^0,w,c
   414  0008C0  A4D8               	btfss	status,2,c
   415  0008C2  EF65  F004         	goto	u411
   416  0008C6  EF67  F004         	goto	u410
   417  0008CA                     u411:
   418  0008CA  EFD5  F004         	goto	l1856
   419  0008CE                     u410:
   420  0008CE                     
   421                           ;main.c: 43:                         LCD_cmd(0xC0);
   422  0008CE  0EC0               	movlw	192
   423  0008D0  EC06  F008         	call	_LCD_cmd
   424                           
   425                           ;main.c: 44:                         switch (oper){
   426  0008D4  EFB8  F004         	goto	l1854
   427  0008D8                     l1832:
   428  0008D8  5017               	movf	_num2^0,w,c
   429  0008DA  2419               	addwf	_num1^0,w,c
   430  0008DC  6E09               	movwf	disp_Res@numb^0,c
   431  0008DE  5018               	movf	(_num2+1)^0,w,c
   432  0008E0  201A               	addwfc	(_num1+1)^0,w,c
   433  0008E2  6E0A               	movwf	(disp_Res@numb+1)^0,c
   434  0008E4  EC95  F006         	call	_disp_Res	;wreg free
   435  0008E8  0E02               	movlw	2
   436  0008EA  EC06  F008         	call	_LCD_cmd
   437  0008EE  EF17  F004         	goto	l1800
   438  0008F2                     l1836:
   439  0008F2  5017               	movf	_num2^0,w,c
   440  0008F4  5C19               	subwf	_num1^0,w,c
   441  0008F6  6E09               	movwf	disp_Res@numb^0,c
   442  0008F8  5018               	movf	(_num2+1)^0,w,c
   443  0008FA  581A               	subwfb	(_num1+1)^0,w,c
   444  0008FC  6E0A               	movwf	(disp_Res@numb+1)^0,c
   445  0008FE  EC95  F006         	call	_disp_Res	;wreg free
   446  000902  0E02               	movlw	2
   447  000904  EC06  F008         	call	_LCD_cmd
   448  000908  EF17  F004         	goto	l1800
   449  00090C                     l1840:
   450  00090C  C019  F001         	movff	_num1,___wmul@multiplier
   451  000910  C01A  F002         	movff	_num1+1,___wmul@multiplier+1
   452  000914  C017  F003         	movff	_num2,___wmul@multiplicand
   453  000918  C018  F004         	movff	_num2+1,___wmul@multiplicand+1
   454  00091C  ECE8  F007         	call	___wmul	;wreg free
   455  000920  C001  F013         	movff	?___wmul,_main$871
   456  000924  C002  F014         	movff	?___wmul+1,_main$871+1
   457  000928  C013  F009         	movff	_main$871,disp_Res@numb
   458  00092C  C014  F00A         	movff	_main$871+1,disp_Res@numb+1
   459  000930  EC95  F006         	call	_disp_Res	;wreg free
   460  000934  0E02               	movlw	2
   461  000936  EC06  F008         	call	_LCD_cmd
   462  00093A  EF17  F004         	goto	l1800
   463  00093E                     l1846:
   464  00093E  C019  F001         	movff	_num1,___awdiv@dividend
   465  000942  C01A  F002         	movff	_num1+1,___awdiv@dividend+1
   466  000946  C017  F003         	movff	_num2,___awdiv@divisor
   467  00094A  C018  F004         	movff	_num2+1,___awdiv@divisor+1
   468  00094E  EC33  F006         	call	___awdiv	;wreg free
   469  000952  C001  F015         	movff	?___awdiv,_main$872
   470  000956  C002  F016         	movff	?___awdiv+1,_main$872+1
   471  00095A  C015  F009         	movff	_main$872,disp_Res@numb
   472  00095E  C016  F00A         	movff	_main$872+1,disp_Res@numb+1
   473  000962  EC95  F006         	call	_disp_Res	;wreg free
   474  000966  0E02               	movlw	2
   475  000968  EC06  F008         	call	_LCD_cmd
   476  00096C  EF17  F004         	goto	l1800
   477  000970                     l1854:
   478  000970  501B               	movf	_oper^0,w,c
   479  000972  6E11               	movwf	??_main^0,c
   480  000974  6A12               	clrf	(??_main+1)^0,c
   481                           
   482                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   483                           ; Switch size 1, requested type "simple"
   484                           ; Number of cases is 1, Range of values is 0 to 0
   485                           ; switch strategies available:
   486                           ; Name         Instructions Cycles
   487                           ; simple_byte            4     3 (average)
   488                           ;	Chosen strategy is simple_byte
   489  000976  5012               	movf	(??_main+1)^0,w,c
   490  000978  0A00               	xorlw	0	; case 0
   491  00097A  B4D8               	btfsc	status,2,c
   492  00097C  EFC2  F004         	goto	l2006
   493  000980  EFEB  F004         	goto	l120
   494  000984                     l2006:
   495                           
   496                           ; Switch size 1, requested type "simple"
   497                           ; Number of cases is 4, Range of values is 42 to 47
   498                           ; switch strategies available:
   499                           ; Name         Instructions Cycles
   500                           ; simple_byte           13     7 (average)
   501                           ;	Chosen strategy is simple_byte
   502  000984  5011               	movf	??_main^0,w,c
   503  000986  0A2A               	xorlw	42	; case 42
   504  000988  B4D8               	btfsc	status,2,c
   505  00098A  EF86  F004         	goto	l1840
   506  00098E  0A01               	xorlw	1	; case 43
   507  000990  B4D8               	btfsc	status,2,c
   508  000992  EF6C  F004         	goto	l1832
   509  000996  0A06               	xorlw	6	; case 45
   510  000998  B4D8               	btfsc	status,2,c
   511  00099A  EF79  F004         	goto	l1836
   512  00099E  0A02               	xorlw	2	; case 47
   513  0009A0  B4D8               	btfsc	status,2,c
   514  0009A2  EF9F  F004         	goto	l1846
   515  0009A6  EFEB  F004         	goto	l120
   516  0009AA                     l1856:
   517  0009AA  0E43               	movlw	67
   518  0009AC  181C               	xorwf	_key^0,w,c
   519  0009AE  A4D8               	btfss	status,2,c
   520  0009B0  EFDC  F004         	goto	u421
   521  0009B4  EFDE  F004         	goto	u420
   522  0009B8                     u421:
   523  0009B8  EFE3  F004         	goto	l1860
   524  0009BC                     u420:
   525  0009BC                     
   526                           ;main.c: 51:                         LCD_cmd(0b00000001);
   527  0009BC  0E01               	movlw	1
   528  0009BE  EC06  F008         	call	_LCD_cmd
   529                           
   530                           ;main.c: 52:                     } else disp_Error(0);
   531  0009C2  EF17  F004         	goto	l1800
   532  0009C6                     l1860:
   533  0009C6  0E00               	movlw	0
   534  0009C8  6E07               	movwf	(disp_Error@numb+1)^0,c
   535  0009CA  0E00               	movlw	0
   536  0009CC  6E06               	movwf	disp_Error@numb^0,c
   537  0009CE  EC66  F007         	call	_disp_Error	;wreg free
   538  0009D2  EF17  F004         	goto	l1800
   539  0009D6                     l120:
   540  0009D6  EF17  F004         	goto	l1800
   541  0009DA  EF00  F000         	goto	start
   542  0009DE                     __end_of_main:
   543                           	callstack 0
   544                           
   545 ;; *************** function _key_init *****************
   546 ;; Defined at:
   547 ;;		line 5 in file "teclado.c"
   548 ;; Parameters:    Size  Location     Type
   549 ;;		None
   550 ;; Auto vars:     Size  Location     Type
   551 ;;		None
   552 ;; Return value:  Size  Location     Type
   553 ;;                  1    wreg      void 
   554 ;; Registers used:
   555 ;;		wreg, status,2
   556 ;; Tracked objects:
   557 ;;		On entry : 0/0
   558 ;;		On exit  : 0/0
   559 ;;		Unchanged: 0/0
   560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   561 ;;      Params:         0       0       0       0       0       0       0       0       0
   562 ;;      Locals:         0       0       0       0       0       0       0       0       0
   563 ;;      Temps:          0       0       0       0       0       0       0       0       0
   564 ;;      Totals:         0       0       0       0       0       0       0       0       0
   565 ;;Total ram usage:        0 bytes
   566 ;; Hardware stack levels used: 1
   567 ;; This function calls:
   568 ;;		Nothing
   569 ;; This function is called by:
   570 ;;		_main
   571 ;; This function uses a non-reentrant model
   572 ;;
   573                           
   574                           	psect	text1
   575  001020                     __ptext1:
   576                           	callstack 0
   577  001020                     _key_init:
   578                           	callstack 30
   579  001020                     
   580                           ;teclado.c: 7:     ANSELB = 0;
   581  001020  0E00               	movlw	0
   582  001022  010F               	movlb	15	; () banked
   583  001024  6F5C               	movwf	92,b	;volatile
   584                           
   585                           ;teclado.c: 8:     TRISB = 0x0F;
   586  001026  0E0F               	movlw	15
   587  001028  6E93               	movwf	147,c	;volatile
   588                           
   589                           ;teclado.c: 9:     WPUB = 0x0F;
   590  00102A  0E0F               	movlw	15
   591  00102C  6E85               	movwf	133,c	;volatile
   592  00102E                     
   593                           ; BSR set to: 15
   594                           ;teclado.c: 10:     INTCON2bits.RBPU = 0;
   595  00102E  9EF1               	bcf	241,7,c	;volatile
   596  001030                     
   597                           ; BSR set to: 15
   598  001030  0012               	return		;funcret
   599  001032                     __end_of_key_init:
   600                           	callstack 0
   601                           
   602 ;; *************** function _key_get *****************
   603 ;; Defined at:
   604 ;;		line 48 in file "teclado.c"
   605 ;; Parameters:    Size  Location     Type
   606 ;;		None
   607 ;; Auto vars:     Size  Location     Type
   608 ;;		None
   609 ;; Return value:  Size  Location     Type
   610 ;;                  1    wreg      unsigned char 
   611 ;; Registers used:
   612 ;;		wreg, status,2, status,0, cstack
   613 ;; Tracked objects:
   614 ;;		On entry : 0/0
   615 ;;		On exit  : 0/0
   616 ;;		Unchanged: 0/0
   617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   618 ;;      Params:         0       0       0       0       0       0       0       0       0
   619 ;;      Locals:         0       0       0       0       0       0       0       0       0
   620 ;;      Temps:          2       0       0       0       0       0       0       0       0
   621 ;;      Totals:         2       0       0       0       0       0       0       0       0
   622 ;;Total ram usage:        2 bytes
   623 ;; Hardware stack levels used: 1
   624 ;; Hardware stack levels required when called: 1
   625 ;; This function calls:
   626 ;;		_key_scanner
   627 ;; This function is called by:
   628 ;;		_main
   629 ;; This function uses a non-reentrant model
   630 ;;
   631                           
   632                           	psect	text2
   633  000F34                     __ptext2:
   634                           	callstack 0
   635  000F34                     _key_get:
   636                           	callstack 29
   637  000F34                     
   638                           ;teclado.c: 50:     key = 'x';
   639  000F34  0E78               	movlw	120
   640  000F36  6E1C               	movwf	_key^0,c
   641                           
   642                           ;teclado.c: 52:     while (key == 'x')
   643  000F38  EFAD  F007         	goto	l1672
   644  000F3C                     l1668:
   645                           
   646                           ;teclado.c: 53:     {;teclado.c: 54:         key = key_scanner();
   647  000F3C  ECEF  F004         	call	_key_scanner	;wreg free
   648  000F40  6E1C               	movwf	_key^0,c
   649  000F42                     
   650                           ;teclado.c: 55:         _delay((unsigned long)((200)*(8000000/4000.0)));
   651  000F42  0E03               	movlw	3
   652  000F44  6E04               	movwf	(??_key_get+1)^0,c
   653  000F46  0E08               	movlw	8
   654  000F48  6E03               	movwf	??_key_get^0,c
   655  000F4A  0E77               	movlw	119
   656  000F4C                     u437:
   657  000F4C  2EE8               	decfsz	wreg,f,c
   658  000F4E  D7FE               	bra	u437
   659  000F50  2E03               	decfsz	??_key_get^0,f,c
   660  000F52  D7FC               	bra	u437
   661  000F54  2E04               	decfsz	(??_key_get+1)^0,f,c
   662  000F56  D7FA               	bra	u437
   663  000F58  F000               	nop	
   664  000F5A                     l1672:
   665                           
   666                           ;teclado.c: 52:     while (key == 'x')
   667  000F5A  0E78               	movlw	120
   668  000F5C  181C               	xorwf	_key^0,w,c
   669  000F5E  B4D8               	btfsc	status,2,c
   670  000F60  EFB4  F007         	goto	u291
   671  000F64  EFB6  F007         	goto	u290
   672  000F68                     u291:
   673  000F68  EF9E  F007         	goto	l1668
   674  000F6C                     u290:
   675  000F6C                     
   676                           ;teclado.c: 57:     return key;
   677  000F6C  501C               	movf	_key^0,w,c
   678  000F6E  0012               	return		;funcret
   679  000F70                     __end_of_key_get:
   680                           	callstack 0
   681                           
   682 ;; *************** function _key_scanner *****************
   683 ;; Defined at:
   684 ;;		line 13 in file "teclado.c"
   685 ;; Parameters:    Size  Location     Type
   686 ;;		None
   687 ;; Auto vars:     Size  Location     Type
   688 ;;		None
   689 ;; Return value:  Size  Location     Type
   690 ;;                  1    wreg      unsigned char 
   691 ;; Registers used:
   692 ;;		wreg, status,2, status,0
   693 ;; Tracked objects:
   694 ;;		On entry : 0/0
   695 ;;		On exit  : 0/0
   696 ;;		Unchanged: 0/0
   697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   698 ;;      Params:         0       0       0       0       0       0       0       0       0
   699 ;;      Locals:         0       0       0       0       0       0       0       0       0
   700 ;;      Temps:          2       0       0       0       0       0       0       0       0
   701 ;;      Totals:         2       0       0       0       0       0       0       0       0
   702 ;;Total ram usage:        2 bytes
   703 ;; Hardware stack levels used: 1
   704 ;; This function calls:
   705 ;;		Nothing
   706 ;; This function is called by:
   707 ;;		_key_get
   708 ;; This function uses a non-reentrant model
   709 ;;
   710                           
   711                           	psect	text3
   712  0009DE                     __ptext3:
   713                           	callstack 0
   714  0009DE                     _key_scanner:
   715                           	callstack 29
   716  0009DE                     
   717                           ;teclado.c: 14:     LATB = 0x70;
   718  0009DE  0E70               	movlw	112
   719  0009E0  6E8A               	movwf	138,c	;volatile
   720                           
   721                           ;teclado.c: 15:     switch (PORTB){
   722  0009E2  EFFF  F004         	goto	l1482
   723  0009E6                     l1456:
   724  0009E6  0E3D               	movlw	61
   725  0009E8  EFA4  F005         	goto	l24
   726  0009EC                     l1462:
   727  0009EC  0E30               	movlw	48
   728  0009EE  EFA4  F005         	goto	l24
   729  0009F2                     l1468:
   730  0009F2  0E43               	movlw	67
   731  0009F4  EFA4  F005         	goto	l24
   732  0009F8                     l1474:
   733  0009F8  0E2F               	movlw	47
   734  0009FA  EFA4  F005         	goto	l24
   735  0009FE                     l1482:
   736  0009FE  5081               	movf	129,w,c	;volatile
   737  000A00  6E01               	movwf	??_key_scanner^0,c
   738  000A02  6A02               	clrf	(??_key_scanner+1)^0,c
   739                           
   740                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   741                           ; Switch size 1, requested type "simple"
   742                           ; Number of cases is 1, Range of values is 0 to 0
   743                           ; switch strategies available:
   744                           ; Name         Instructions Cycles
   745                           ; simple_byte            4     3 (average)
   746                           ;	Chosen strategy is simple_byte
   747  000A04  5002               	movf	(??_key_scanner+1)^0,w,c
   748  000A06  0A00               	xorlw	0	; case 0
   749  000A08  B4D8               	btfsc	status,2,c
   750  000A0A  EF09  F005         	goto	l2008
   751  000A0E  EF1C  F005         	goto	l1484
   752  000A12                     l2008:
   753                           
   754                           ; Switch size 1, requested type "simple"
   755                           ; Number of cases is 4, Range of values is 119 to 126
   756                           ; switch strategies available:
   757                           ; Name         Instructions Cycles
   758                           ; simple_byte           13     7 (average)
   759                           ;	Chosen strategy is simple_byte
   760  000A12  5001               	movf	??_key_scanner^0,w,c
   761  000A14  0A77               	xorlw	119	; case 119
   762  000A16  B4D8               	btfsc	status,2,c
   763  000A18  EFFC  F004         	goto	l1474
   764  000A1C  0A0C               	xorlw	12	; case 123
   765  000A1E  B4D8               	btfsc	status,2,c
   766  000A20  EFF9  F004         	goto	l1468
   767  000A24  0A06               	xorlw	6	; case 125
   768  000A26  B4D8               	btfsc	status,2,c
   769  000A28  EFF6  F004         	goto	l1462
   770  000A2C  0A03               	xorlw	3	; case 126
   771  000A2E  B4D8               	btfsc	status,2,c
   772  000A30  EFF3  F004         	goto	l1456
   773  000A34  EF1C  F005         	goto	l1484
   774  000A38                     l1484:
   775                           
   776                           ;teclado.c: 22:     LATB = 0xB0;
   777  000A38  0EB0               	movlw	176
   778  000A3A  6E8A               	movwf	138,c	;volatile
   779                           
   780                           ;teclado.c: 23:     switch (PORTB){
   781  000A3C  EF2C  F005         	goto	l1512
   782  000A40                     l1486:
   783  000A40  0E37               	movlw	55
   784  000A42  EFA4  F005         	goto	l24
   785  000A46                     l1492:
   786  000A46  0E38               	movlw	56
   787  000A48  EFA4  F005         	goto	l24
   788  000A4C                     l1498:
   789  000A4C  0E39               	movlw	57
   790  000A4E  EFA4  F005         	goto	l24
   791  000A52                     l1504:
   792  000A52  0E2A               	movlw	42
   793  000A54  EFA4  F005         	goto	l24
   794  000A58                     l1512:
   795  000A58  5081               	movf	129,w,c	;volatile
   796  000A5A  6E01               	movwf	??_key_scanner^0,c
   797  000A5C  6A02               	clrf	(??_key_scanner+1)^0,c
   798                           
   799                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   800                           ; Switch size 1, requested type "simple"
   801                           ; Number of cases is 1, Range of values is 0 to 0
   802                           ; switch strategies available:
   803                           ; Name         Instructions Cycles
   804                           ; simple_byte            4     3 (average)
   805                           ;	Chosen strategy is simple_byte
   806  000A5E  5002               	movf	(??_key_scanner+1)^0,w,c
   807  000A60  0A00               	xorlw	0	; case 0
   808  000A62  B4D8               	btfsc	status,2,c
   809  000A64  EF36  F005         	goto	l2010
   810  000A68  EF49  F005         	goto	l1514
   811  000A6C                     l2010:
   812                           
   813                           ; Switch size 1, requested type "simple"
   814                           ; Number of cases is 4, Range of values is 183 to 190
   815                           ; switch strategies available:
   816                           ; Name         Instructions Cycles
   817                           ; simple_byte           13     7 (average)
   818                           ;	Chosen strategy is simple_byte
   819  000A6C  5001               	movf	??_key_scanner^0,w,c
   820  000A6E  0AB7               	xorlw	183	; case 183
   821  000A70  B4D8               	btfsc	status,2,c
   822  000A72  EF29  F005         	goto	l1504
   823  000A76  0A0C               	xorlw	12	; case 187
   824  000A78  B4D8               	btfsc	status,2,c
   825  000A7A  EF26  F005         	goto	l1498
   826  000A7E  0A06               	xorlw	6	; case 189
   827  000A80  B4D8               	btfsc	status,2,c
   828  000A82  EF23  F005         	goto	l1492
   829  000A86  0A03               	xorlw	3	; case 190
   830  000A88  B4D8               	btfsc	status,2,c
   831  000A8A  EF20  F005         	goto	l1486
   832  000A8E  EF49  F005         	goto	l1514
   833  000A92                     l1514:
   834                           
   835                           ;teclado.c: 29:     LATB = 0xD0;
   836  000A92  0ED0               	movlw	208
   837  000A94  6E8A               	movwf	138,c	;volatile
   838                           
   839                           ;teclado.c: 30:     switch (PORTB){
   840  000A96  EF59  F005         	goto	l1542
   841  000A9A                     l1516:
   842  000A9A  0E34               	movlw	52
   843  000A9C  EFA4  F005         	goto	l24
   844  000AA0                     l1522:
   845  000AA0  0E35               	movlw	53
   846  000AA2  EFA4  F005         	goto	l24
   847  000AA6                     l1528:
   848  000AA6  0E36               	movlw	54
   849  000AA8  EFA4  F005         	goto	l24
   850  000AAC                     l1534:
   851  000AAC  0E2D               	movlw	45
   852  000AAE  EFA4  F005         	goto	l24
   853  000AB2                     l1542:
   854  000AB2  5081               	movf	129,w,c	;volatile
   855  000AB4  6E01               	movwf	??_key_scanner^0,c
   856  000AB6  6A02               	clrf	(??_key_scanner+1)^0,c
   857                           
   858                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   859                           ; Switch size 1, requested type "simple"
   860                           ; Number of cases is 1, Range of values is 0 to 0
   861                           ; switch strategies available:
   862                           ; Name         Instructions Cycles
   863                           ; simple_byte            4     3 (average)
   864                           ;	Chosen strategy is simple_byte
   865  000AB8  5002               	movf	(??_key_scanner+1)^0,w,c
   866  000ABA  0A00               	xorlw	0	; case 0
   867  000ABC  B4D8               	btfsc	status,2,c
   868  000ABE  EF63  F005         	goto	l2012
   869  000AC2  EF76  F005         	goto	l1544
   870  000AC6                     l2012:
   871                           
   872                           ; Switch size 1, requested type "simple"
   873                           ; Number of cases is 4, Range of values is 215 to 222
   874                           ; switch strategies available:
   875                           ; Name         Instructions Cycles
   876                           ; simple_byte           13     7 (average)
   877                           ;	Chosen strategy is simple_byte
   878  000AC6  5001               	movf	??_key_scanner^0,w,c
   879  000AC8  0AD7               	xorlw	215	; case 215
   880  000ACA  B4D8               	btfsc	status,2,c
   881  000ACC  EF56  F005         	goto	l1534
   882  000AD0  0A0C               	xorlw	12	; case 219
   883  000AD2  B4D8               	btfsc	status,2,c
   884  000AD4  EF53  F005         	goto	l1528
   885  000AD8  0A06               	xorlw	6	; case 221
   886  000ADA  B4D8               	btfsc	status,2,c
   887  000ADC  EF50  F005         	goto	l1522
   888  000AE0  0A03               	xorlw	3	; case 222
   889  000AE2  B4D8               	btfsc	status,2,c
   890  000AE4  EF4D  F005         	goto	l1516
   891  000AE8  EF76  F005         	goto	l1544
   892  000AEC                     l1544:
   893                           
   894                           ;teclado.c: 36:     LATB = 0xE0;
   895  000AEC  0EE0               	movlw	224
   896  000AEE  6E8A               	movwf	138,c	;volatile
   897                           
   898                           ;teclado.c: 37:     switch (PORTB){
   899  000AF0  EF86  F005         	goto	l1572
   900  000AF4                     l1546:
   901  000AF4  0E31               	movlw	49
   902  000AF6  EFA4  F005         	goto	l24
   903  000AFA                     l1552:
   904  000AFA  0E32               	movlw	50
   905  000AFC  EFA4  F005         	goto	l24
   906  000B00                     l1558:
   907  000B00  0E33               	movlw	51
   908  000B02  EFA4  F005         	goto	l24
   909  000B06                     l1564:
   910  000B06  0E2B               	movlw	43
   911  000B08  EFA4  F005         	goto	l24
   912  000B0C                     l1572:
   913  000B0C  5081               	movf	129,w,c	;volatile
   914  000B0E  6E01               	movwf	??_key_scanner^0,c
   915  000B10  6A02               	clrf	(??_key_scanner+1)^0,c
   916                           
   917                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   918                           ; Switch size 1, requested type "simple"
   919                           ; Number of cases is 1, Range of values is 0 to 0
   920                           ; switch strategies available:
   921                           ; Name         Instructions Cycles
   922                           ; simple_byte            4     3 (average)
   923                           ;	Chosen strategy is simple_byte
   924  000B12  5002               	movf	(??_key_scanner+1)^0,w,c
   925  000B14  0A00               	xorlw	0	; case 0
   926  000B16  B4D8               	btfsc	status,2,c
   927  000B18  EF90  F005         	goto	l2014
   928  000B1C  EFA3  F005         	goto	l1574
   929  000B20                     l2014:
   930                           
   931                           ; Switch size 1, requested type "simple"
   932                           ; Number of cases is 4, Range of values is 231 to 238
   933                           ; switch strategies available:
   934                           ; Name         Instructions Cycles
   935                           ; simple_byte           13     7 (average)
   936                           ;	Chosen strategy is simple_byte
   937  000B20  5001               	movf	??_key_scanner^0,w,c
   938  000B22  0AE7               	xorlw	231	; case 231
   939  000B24  B4D8               	btfsc	status,2,c
   940  000B26  EF83  F005         	goto	l1564
   941  000B2A  0A0C               	xorlw	12	; case 235
   942  000B2C  B4D8               	btfsc	status,2,c
   943  000B2E  EF80  F005         	goto	l1558
   944  000B32  0A06               	xorlw	6	; case 237
   945  000B34  B4D8               	btfsc	status,2,c
   946  000B36  EF7D  F005         	goto	l1552
   947  000B3A  0A03               	xorlw	3	; case 238
   948  000B3C  B4D8               	btfsc	status,2,c
   949  000B3E  EF7A  F005         	goto	l1546
   950  000B42  EFA3  F005         	goto	l1574
   951  000B46                     l1574:
   952                           
   953                           ;teclado.c: 43:     return 'x';
   954  000B46  0E78               	movlw	120
   955  000B48                     l24:
   956  000B48  0012               	return		;funcret
   957  000B4A                     __end_of_key_scanner:
   958                           	callstack 0
   959                           
   960 ;; *************** function _get_Num *****************
   961 ;; Defined at:
   962 ;;		line 60 in file "main.c"
   963 ;; Parameters:    Size  Location     Type
   964 ;;  ch              1    wreg     unsigned char 
   965 ;; Auto vars:     Size  Location     Type
   966 ;;  ch              1   13[COMRAM] unsigned char 
   967 ;;  num             2   14[COMRAM] int 
   968 ;; Return value:  Size  Location     Type
   969 ;;                  2    9[COMRAM] int 
   970 ;; Registers used:
   971 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   972 ;; Tracked objects:
   973 ;;		On entry : 0/0
   974 ;;		On exit  : 0/0
   975 ;;		Unchanged: 0/0
   976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   977 ;;      Params:         2       0       0       0       0       0       0       0       0
   978 ;;      Locals:         3       0       0       0       0       0       0       0       0
   979 ;;      Temps:          2       0       0       0       0       0       0       0       0
   980 ;;      Totals:         7       0       0       0       0       0       0       0       0
   981 ;;Total ram usage:        7 bytes
   982 ;; Hardware stack levels used: 1
   983 ;; Hardware stack levels required when called: 3
   984 ;; This function calls:
   985 ;;		_LCD_cmd
   986 ;;		_disp_Error
   987 ;; This function is called by:
   988 ;;		_main
   989 ;; This function uses a non-reentrant model
   990 ;;
   991                           
   992                           	psect	text4
   993  000B4A                     __ptext4:
   994                           	callstack 0
   995  000B4A                     _get_Num:
   996                           	callstack 27
   997                           
   998                           ;incstack = 0
   999                           ;get_Num@ch stored from wreg
  1000  000B4A  6E0E               	movwf	get_Num@ch^0,c
  1001  000B4C                     
  1002                           ;main.c: 62:     switch(ch){
  1003  000B4C  EFF5  F005         	goto	l1736
  1004  000B50                     l1706:
  1005  000B50  0E00               	movlw	0
  1006  000B52  6E10               	movwf	(get_Num@num+1)^0,c
  1007  000B54  0E00               	movlw	0
  1008  000B56  6E0F               	movwf	get_Num@num^0,c
  1009  000B58  EF2E  F006         	goto	l139
  1010  000B5C                     l1708:
  1011  000B5C  0E00               	movlw	0
  1012  000B5E  6E10               	movwf	(get_Num@num+1)^0,c
  1013  000B60  0E01               	movlw	1
  1014  000B62  6E0F               	movwf	get_Num@num^0,c
  1015  000B64  EF2E  F006         	goto	l139
  1016  000B68                     l1710:
  1017  000B68  0E00               	movlw	0
  1018  000B6A  6E10               	movwf	(get_Num@num+1)^0,c
  1019  000B6C  0E02               	movlw	2
  1020  000B6E  6E0F               	movwf	get_Num@num^0,c
  1021  000B70  EF2E  F006         	goto	l139
  1022  000B74                     l1712:
  1023  000B74  0E00               	movlw	0
  1024  000B76  6E10               	movwf	(get_Num@num+1)^0,c
  1025  000B78  0E03               	movlw	3
  1026  000B7A  6E0F               	movwf	get_Num@num^0,c
  1027  000B7C  EF2E  F006         	goto	l139
  1028  000B80                     l1714:
  1029  000B80  0E00               	movlw	0
  1030  000B82  6E10               	movwf	(get_Num@num+1)^0,c
  1031  000B84  0E04               	movlw	4
  1032  000B86  6E0F               	movwf	get_Num@num^0,c
  1033  000B88  EF2E  F006         	goto	l139
  1034  000B8C                     l1716:
  1035  000B8C  0E00               	movlw	0
  1036  000B8E  6E10               	movwf	(get_Num@num+1)^0,c
  1037  000B90  0E05               	movlw	5
  1038  000B92  6E0F               	movwf	get_Num@num^0,c
  1039  000B94  EF2E  F006         	goto	l139
  1040  000B98                     l1718:
  1041  000B98  0E00               	movlw	0
  1042  000B9A  6E10               	movwf	(get_Num@num+1)^0,c
  1043  000B9C  0E06               	movlw	6
  1044  000B9E  6E0F               	movwf	get_Num@num^0,c
  1045  000BA0  EF2E  F006         	goto	l139
  1046  000BA4                     l1720:
  1047  000BA4  0E00               	movlw	0
  1048  000BA6  6E10               	movwf	(get_Num@num+1)^0,c
  1049  000BA8  0E07               	movlw	7
  1050  000BAA  6E0F               	movwf	get_Num@num^0,c
  1051  000BAC  EF2E  F006         	goto	l139
  1052  000BB0                     l1722:
  1053  000BB0  0E00               	movlw	0
  1054  000BB2  6E10               	movwf	(get_Num@num+1)^0,c
  1055  000BB4  0E08               	movlw	8
  1056  000BB6  6E0F               	movwf	get_Num@num^0,c
  1057  000BB8  EF2E  F006         	goto	l139
  1058  000BBC                     l1724:
  1059  000BBC  0E00               	movlw	0
  1060  000BBE  6E10               	movwf	(get_Num@num+1)^0,c
  1061  000BC0  0E09               	movlw	9
  1062  000BC2  6E0F               	movwf	get_Num@num^0,c
  1063  000BC4  EF2E  F006         	goto	l139
  1064  000BC8                     l1726:
  1065                           
  1066                           ;main.c: 74:         LCD_cmd(0b00000001);
  1067  000BC8  0E01               	movlw	1
  1068  000BCA  EC06  F008         	call	_LCD_cmd
  1069  000BCE                     l1728:
  1070                           
  1071                           ;main.c: 75:         num = 13;
  1072  000BCE  0E00               	movlw	0
  1073  000BD0  6E10               	movwf	(get_Num@num+1)^0,c
  1074  000BD2  0E0D               	movlw	13
  1075  000BD4  6E0F               	movwf	get_Num@num^0,c
  1076                           
  1077                           ;main.c: 76:         break;
  1078  000BD6  EF2E  F006         	goto	l139
  1079  000BDA                     l1730:
  1080                           
  1081                           ;main.c: 78:         disp_Error(0);
  1082  000BDA  0E00               	movlw	0
  1083  000BDC  6E07               	movwf	(disp_Error@numb+1)^0,c
  1084  000BDE  0E00               	movlw	0
  1085  000BE0  6E06               	movwf	disp_Error@numb^0,c
  1086  000BE2  EC66  F007         	call	_disp_Error	;wreg free
  1087  000BE6  EFE7  F005         	goto	l1728
  1088  000BEA                     l1736:
  1089  000BEA  500E               	movf	get_Num@ch^0,w,c
  1090  000BEC  6E0C               	movwf	??_get_Num^0,c
  1091  000BEE  6A0D               	clrf	(??_get_Num+1)^0,c
  1092                           
  1093                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1094                           ; Switch size 1, requested type "simple"
  1095                           ; Number of cases is 1, Range of values is 0 to 0
  1096                           ; switch strategies available:
  1097                           ; Name         Instructions Cycles
  1098                           ; simple_byte            4     3 (average)
  1099                           ;	Chosen strategy is simple_byte
  1100  000BF0  500D               	movf	(??_get_Num+1)^0,w,c
  1101  000BF2  0A00               	xorlw	0	; case 0
  1102  000BF4  B4D8               	btfsc	status,2,c
  1103  000BF6  EFFF  F005         	goto	l2016
  1104  000BFA  EFED  F005         	goto	l1730
  1105  000BFE                     l2016:
  1106                           
  1107                           ; Switch size 1, requested type "simple"
  1108                           ; Number of cases is 11, Range of values is 48 to 67
  1109                           ; switch strategies available:
  1110                           ; Name         Instructions Cycles
  1111                           ; simple_byte           34    18 (average)
  1112                           ;	Chosen strategy is simple_byte
  1113  000BFE  500C               	movf	??_get_Num^0,w,c
  1114  000C00  0A30               	xorlw	48	; case 48
  1115  000C02  B4D8               	btfsc	status,2,c
  1116  000C04  EFA8  F005         	goto	l1706
  1117  000C08  0A01               	xorlw	1	; case 49
  1118  000C0A  B4D8               	btfsc	status,2,c
  1119  000C0C  EFAE  F005         	goto	l1708
  1120  000C10  0A03               	xorlw	3	; case 50
  1121  000C12  B4D8               	btfsc	status,2,c
  1122  000C14  EFB4  F005         	goto	l1710
  1123  000C18  0A01               	xorlw	1	; case 51
  1124  000C1A  B4D8               	btfsc	status,2,c
  1125  000C1C  EFBA  F005         	goto	l1712
  1126  000C20  0A07               	xorlw	7	; case 52
  1127  000C22  B4D8               	btfsc	status,2,c
  1128  000C24  EFC0  F005         	goto	l1714
  1129  000C28  0A01               	xorlw	1	; case 53
  1130  000C2A  B4D8               	btfsc	status,2,c
  1131  000C2C  EFC6  F005         	goto	l1716
  1132  000C30  0A03               	xorlw	3	; case 54
  1133  000C32  B4D8               	btfsc	status,2,c
  1134  000C34  EFCC  F005         	goto	l1718
  1135  000C38  0A01               	xorlw	1	; case 55
  1136  000C3A  B4D8               	btfsc	status,2,c
  1137  000C3C  EFD2  F005         	goto	l1720
  1138  000C40  0A0F               	xorlw	15	; case 56
  1139  000C42  B4D8               	btfsc	status,2,c
  1140  000C44  EFD8  F005         	goto	l1722
  1141  000C48  0A01               	xorlw	1	; case 57
  1142  000C4A  B4D8               	btfsc	status,2,c
  1143  000C4C  EFDE  F005         	goto	l1724
  1144  000C50  0A7A               	xorlw	122	; case 67
  1145  000C52  B4D8               	btfsc	status,2,c
  1146  000C54  EFE4  F005         	goto	l1726
  1147  000C58  EFED  F005         	goto	l1730
  1148  000C5C                     l139:
  1149                           
  1150                           ;main.c: 82:     return num;
  1151  000C5C  C00F  F00A         	movff	get_Num@num,?_get_Num
  1152  000C60  C010  F00B         	movff	get_Num@num+1,?_get_Num+1
  1153  000C64  0012               	return		;funcret
  1154  000C66                     __end_of_get_Num:
  1155                           	callstack 0
  1156                           
  1157 ;; *************** function _get_Func *****************
  1158 ;; Defined at:
  1159 ;;		line 85 in file "main.c"
  1160 ;; Parameters:    Size  Location     Type
  1161 ;;  chf             1    wreg     unsigned char 
  1162 ;; Auto vars:     Size  Location     Type
  1163 ;;  chf             1    9[COMRAM] unsigned char 
  1164 ;; Return value:  Size  Location     Type
  1165 ;;                  1    wreg      unsigned char 
  1166 ;; Registers used:
  1167 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1168 ;; Tracked objects:
  1169 ;;		On entry : 0/0
  1170 ;;		On exit  : 0/0
  1171 ;;		Unchanged: 0/0
  1172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1173 ;;      Params:         0       0       0       0       0       0       0       0       0
  1174 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1175 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1176 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1177 ;;Total ram usage:        1 bytes
  1178 ;; Hardware stack levels used: 1
  1179 ;; Hardware stack levels required when called: 3
  1180 ;; This function calls:
  1181 ;;		_LCD_cmd
  1182 ;;		_disp_Error
  1183 ;; This function is called by:
  1184 ;;		_main
  1185 ;; This function uses a non-reentrant model
  1186 ;;
  1187                           
  1188                           	psect	text5
  1189  000DE6                     __ptext5:
  1190                           	callstack 0
  1191  000DE6                     _get_Func:
  1192                           	callstack 27
  1193                           
  1194                           ;incstack = 0
  1195                           ;get_Func@chf stored from wreg
  1196  000DE6  6E0A               	movwf	get_Func@chf^0,c
  1197  000DE8                     
  1198                           ;main.c: 86:     if(chf=='C'){
  1199  000DE8  0E43               	movlw	67
  1200  000DEA  180A               	xorwf	get_Func@chf^0,w,c
  1201  000DEC  A4D8               	btfss	status,2,c
  1202  000DEE  EFFB  F006         	goto	u301
  1203  000DF2  EFFD  F006         	goto	u300
  1204  000DF6                     u301:
  1205  000DF6  EF03  F007         	goto	l1750
  1206  000DFA                     u300:
  1207  000DFA                     
  1208                           ;main.c: 87:         LCD_cmd(0b00000001);
  1209  000DFA  0E01               	movlw	1
  1210  000DFC  EC06  F008         	call	_LCD_cmd
  1211  000E00                     l1746:
  1212                           
  1213                           ;main.c: 88:         return 'e';
  1214  000E00  0E65               	movlw	101
  1215  000E02  EF30  F007         	goto	l155
  1216  000E06                     l1750:
  1217                           
  1218                           ;main.c: 90:     if( chf!='+' && chf!='-' && chf!='*' && chf!='/' ){
  1219  000E06  0E2B               	movlw	43
  1220  000E08  180A               	xorwf	get_Func@chf^0,w,c
  1221  000E0A  B4D8               	btfsc	status,2,c
  1222  000E0C  EF0A  F007         	goto	u311
  1223  000E10  EF0C  F007         	goto	u310
  1224  000E14                     u311:
  1225  000E14  EF2F  F007         	goto	l1764
  1226  000E18                     u310:
  1227  000E18  0E2D               	movlw	45
  1228  000E1A  180A               	xorwf	get_Func@chf^0,w,c
  1229  000E1C  B4D8               	btfsc	status,2,c
  1230  000E1E  EF13  F007         	goto	u321
  1231  000E22  EF15  F007         	goto	u320
  1232  000E26                     u321:
  1233  000E26  EF2F  F007         	goto	l1764
  1234  000E2A                     u320:
  1235  000E2A  0E2A               	movlw	42
  1236  000E2C  180A               	xorwf	get_Func@chf^0,w,c
  1237  000E2E  B4D8               	btfsc	status,2,c
  1238  000E30  EF1C  F007         	goto	u331
  1239  000E34  EF1E  F007         	goto	u330
  1240  000E38                     u331:
  1241  000E38  EF2F  F007         	goto	l1764
  1242  000E3C                     u330:
  1243  000E3C  0E2F               	movlw	47
  1244  000E3E  180A               	xorwf	get_Func@chf^0,w,c
  1245  000E40  B4D8               	btfsc	status,2,c
  1246  000E42  EF25  F007         	goto	u341
  1247  000E46  EF27  F007         	goto	u340
  1248  000E4A                     u341:
  1249  000E4A  EF2F  F007         	goto	l1764
  1250  000E4E                     u340:
  1251  000E4E                     
  1252                           ;main.c: 91:         disp_Error(1);
  1253  000E4E  0E00               	movlw	0
  1254  000E50  6E07               	movwf	(disp_Error@numb+1)^0,c
  1255  000E52  0E01               	movlw	1
  1256  000E54  6E06               	movwf	disp_Error@numb^0,c
  1257  000E56  EC66  F007         	call	_disp_Error	;wreg free
  1258  000E5A  EF00  F007         	goto	l1746
  1259  000E5E                     l1764:
  1260                           
  1261                           ;main.c: 94:     return chf;
  1262  000E5E  500A               	movf	get_Func@chf^0,w,c
  1263  000E60                     l155:
  1264  000E60  0012               	return		;funcret
  1265  000E62                     __end_of_get_Func:
  1266                           	callstack 0
  1267                           
  1268 ;; *************** function _disp_Error *****************
  1269 ;; Defined at:
  1270 ;;		line 119 in file "main.c"
  1271 ;; Parameters:    Size  Location     Type
  1272 ;;  numb            2    5[COMRAM] int 
  1273 ;; Auto vars:     Size  Location     Type
  1274 ;;		None
  1275 ;; Return value:  Size  Location     Type
  1276 ;;                  1    wreg      void 
  1277 ;; Registers used:
  1278 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1279 ;; Tracked objects:
  1280 ;;		On entry : 0/0
  1281 ;;		On exit  : 0/0
  1282 ;;		Unchanged: 0/0
  1283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1284 ;;      Params:         2       0       0       0       0       0       0       0       0
  1285 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1286 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1287 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1288 ;;Total ram usage:        4 bytes
  1289 ;; Hardware stack levels used: 1
  1290 ;; Hardware stack levels required when called: 2
  1291 ;; This function calls:
  1292 ;;		_LCD_cmd
  1293 ;;		_write_string_LCD
  1294 ;; This function is called by:
  1295 ;;		_main
  1296 ;;		_get_Num
  1297 ;;		_get_Func
  1298 ;; This function uses a non-reentrant model
  1299 ;;
  1300                           
  1301                           	psect	text6
  1302  000ECC                     __ptext6:
  1303                           	callstack 0
  1304  000ECC                     _disp_Error:
  1305                           	callstack 27
  1306  000ECC                     
  1307                           ;main.c: 120:     LCD_cmd(0b00000001);
  1308  000ECC  0E01               	movlw	1
  1309  000ECE  EC06  F008         	call	_LCD_cmd
  1310                           
  1311                           ;main.c: 121:     switch(numb){
  1312  000ED2  EF83  F007         	goto	l1606
  1313  000ED6                     l1598:
  1314  000ED6  0E11               	movlw	low STR_2
  1315  000ED8  6E04               	movwf	write_string_LCD@s^0,c
  1316  000EDA  0E08               	movlw	high STR_2
  1317  000EDC  6E05               	movwf	(write_string_LCD@s+1)^0,c
  1318  000EDE  ECB8  F007         	call	_write_string_LCD	;wreg free
  1319  000EE2  EF99  F007         	goto	l170
  1320  000EE6                     l1600:
  1321  000EE6  0E01               	movlw	low STR_3
  1322  000EE8  6E04               	movwf	write_string_LCD@s^0,c
  1323  000EEA  0E08               	movlw	high STR_3
  1324  000EEC  6E05               	movwf	(write_string_LCD@s+1)^0,c
  1325  000EEE  ECB8  F007         	call	_write_string_LCD	;wreg free
  1326  000EF2  EF99  F007         	goto	l170
  1327  000EF6                     l1602:
  1328  000EF6  0E11               	movlw	low STR_2
  1329  000EF8  6E04               	movwf	write_string_LCD@s^0,c
  1330  000EFA  0E08               	movlw	high STR_2
  1331  000EFC  6E05               	movwf	(write_string_LCD@s+1)^0,c
  1332  000EFE  ECB8  F007         	call	_write_string_LCD	;wreg free
  1333  000F02  EF99  F007         	goto	l170
  1334  000F06                     l1606:
  1335  000F06  C006  F008         	movff	disp_Error@numb,??_disp_Error
  1336  000F0A  C007  F009         	movff	disp_Error@numb+1,??_disp_Error+1
  1337                           
  1338                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1339                           ; Switch size 1, requested type "simple"
  1340                           ; Number of cases is 1, Range of values is 0 to 0
  1341                           ; switch strategies available:
  1342                           ; Name         Instructions Cycles
  1343                           ; simple_byte            4     3 (average)
  1344                           ;	Chosen strategy is simple_byte
  1345  000F0E  5009               	movf	(??_disp_Error+1)^0,w,c
  1346  000F10  0A00               	xorlw	0	; case 0
  1347  000F12  B4D8               	btfsc	status,2,c
  1348  000F14  EF8E  F007         	goto	l2018
  1349  000F18  EF7B  F007         	goto	l1602
  1350  000F1C                     l2018:
  1351                           
  1352                           ; Switch size 1, requested type "simple"
  1353                           ; Number of cases is 2, Range of values is 0 to 1
  1354                           ; switch strategies available:
  1355                           ; Name         Instructions Cycles
  1356                           ; simple_byte            7     4 (average)
  1357                           ;	Chosen strategy is simple_byte
  1358  000F1C  5008               	movf	??_disp_Error^0,w,c
  1359  000F1E  0A00               	xorlw	0	; case 0
  1360  000F20  B4D8               	btfsc	status,2,c
  1361  000F22  EF6B  F007         	goto	l1598
  1362  000F26  0A01               	xorlw	1	; case 1
  1363  000F28  B4D8               	btfsc	status,2,c
  1364  000F2A  EF73  F007         	goto	l1600
  1365  000F2E  EF7B  F007         	goto	l1602
  1366  000F32                     l170:
  1367  000F32  0012               	return		;funcret
  1368  000F34                     __end_of_disp_Error:
  1369                           	callstack 0
  1370                           
  1371 ;; *************** function _disp_Res *****************
  1372 ;; Defined at:
  1373 ;;		line 97 in file "main.c"
  1374 ;; Parameters:    Size  Location     Type
  1375 ;;  numb            2    8[COMRAM] int 
  1376 ;; Auto vars:     Size  Location     Type
  1377 ;;  HundrethDigi    1   12[COMRAM] unsigned char 
  1378 ;;  TenthDigit      1   11[COMRAM] unsigned char 
  1379 ;;  UnitDigit       1   10[COMRAM] unsigned char 
  1380 ;; Return value:  Size  Location     Type
  1381 ;;                  1    wreg      void 
  1382 ;; Registers used:
  1383 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1384 ;; Tracked objects:
  1385 ;;		On entry : 0/0
  1386 ;;		On exit  : 0/0
  1387 ;;		Unchanged: 0/0
  1388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1389 ;;      Params:         2       0       0       0       0       0       0       0       0
  1390 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1391 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1392 ;;      Totals:         5       0       0       0       0       0       0       0       0
  1393 ;;Total ram usage:        5 bytes
  1394 ;; Hardware stack levels used: 1
  1395 ;; Hardware stack levels required when called: 2
  1396 ;; This function calls:
  1397 ;;		___awdiv
  1398 ;;		___wmul
  1399 ;;		_send_to_LCD
  1400 ;;		_write_string_LCD
  1401 ;; This function is called by:
  1402 ;;		_main
  1403 ;; This function uses a non-reentrant model
  1404 ;;
  1405                           
  1406                           	psect	text7
  1407  000D2A                     __ptext7:
  1408                           	callstack 0
  1409  000D2A                     _disp_Res:
  1410                           	callstack 28
  1411  000D2A                     
  1412                           ;main.c: 99:     unsigned char TenthDigit = 0;
  1413  000D2A  0E00               	movlw	0
  1414  000D2C  6E0C               	movwf	disp_Res@TenthDigit^0,c
  1415                           
  1416                           ;main.c: 100:     unsigned char HundrethDigit = 0;
  1417  000D2E  0E00               	movlw	0
  1418  000D30  6E0D               	movwf	disp_Res@HundrethDigit^0,c
  1419  000D32                     
  1420                           ;main.c: 102:     if (numb < 0)
  1421  000D32  BE0A               	btfsc	(disp_Res@numb+1)^0,7,c
  1422  000D34  EFA0  F006         	goto	u350
  1423  000D38  EF9E  F006         	goto	u351
  1424  000D3C                     u351:
  1425  000D3C  EFAA  F006         	goto	l1776
  1426  000D40                     u350:
  1427  000D40                     
  1428                           ;main.c: 103:     {;main.c: 104:         numb = numb *-1;
  1429  000D40  6C09               	negf	disp_Res@numb^0,c
  1430  000D42  1E0A               	comf	(disp_Res@numb+1)^0,f,c
  1431  000D44  B0D8               	btfsc	status,0,c
  1432  000D46  2A0A               	incf	(disp_Res@numb+1)^0,f,c
  1433  000D48                     
  1434                           ;main.c: 105:         write_string_LCD("-");
  1435  000D48  0E1E               	movlw	low STR_1
  1436  000D4A  6E04               	movwf	write_string_LCD@s^0,c
  1437  000D4C  0E08               	movlw	high STR_1
  1438  000D4E  6E05               	movwf	(write_string_LCD@s+1)^0,c
  1439  000D50  ECB8  F007         	call	_write_string_LCD	;wreg free
  1440  000D54                     l1776:
  1441                           
  1442                           ;main.c: 108:     HundrethDigit = (numb/100);
  1443  000D54  C009  F001         	movff	disp_Res@numb,___awdiv@dividend
  1444  000D58  C00A  F002         	movff	disp_Res@numb+1,___awdiv@dividend+1
  1445  000D5C  0E00               	movlw	0
  1446  000D5E  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1447  000D60  0E64               	movlw	100
  1448  000D62  6E03               	movwf	___awdiv@divisor^0,c
  1449  000D64  EC33  F006         	call	___awdiv	;wreg free
  1450  000D68  5001               	movf	?___awdiv^0,w,c
  1451  000D6A  6E0D               	movwf	disp_Res@HundrethDigit^0,c
  1452  000D6C                     
  1453                           ;main.c: 109:     numb = numb - HundrethDigit*100;
  1454  000D6C  C00D  F001         	movff	disp_Res@HundrethDigit,___wmul@multiplier
  1455  000D70  6A02               	clrf	(___wmul@multiplier+1)^0,c
  1456  000D72  0EFF               	movlw	255
  1457  000D74  6E04               	movwf	(___wmul@multiplicand+1)^0,c
  1458  000D76  0E9C               	movlw	156
  1459  000D78  6E03               	movwf	___wmul@multiplicand^0,c
  1460  000D7A  ECE8  F007         	call	___wmul	;wreg free
  1461  000D7E  5009               	movf	disp_Res@numb^0,w,c
  1462  000D80  2401               	addwf	?___wmul^0,w,c
  1463  000D82  6E09               	movwf	disp_Res@numb^0,c
  1464  000D84  500A               	movf	(disp_Res@numb+1)^0,w,c
  1465  000D86  2002               	addwfc	(?___wmul+1)^0,w,c
  1466  000D88  6E0A               	movwf	(disp_Res@numb+1)^0,c
  1467  000D8A                     
  1468                           ;main.c: 110:     TenthDigit = (numb/10);
  1469  000D8A  C009  F001         	movff	disp_Res@numb,___awdiv@dividend
  1470  000D8E  C00A  F002         	movff	disp_Res@numb+1,___awdiv@dividend+1
  1471  000D92  0E00               	movlw	0
  1472  000D94  6E04               	movwf	(___awdiv@divisor+1)^0,c
  1473  000D96  0E0A               	movlw	10
  1474  000D98  6E03               	movwf	___awdiv@divisor^0,c
  1475  000D9A  EC33  F006         	call	___awdiv	;wreg free
  1476  000D9E  5001               	movf	?___awdiv^0,w,c
  1477  000DA0  6E0C               	movwf	disp_Res@TenthDigit^0,c
  1478  000DA2                     
  1479                           ;main.c: 111:     if (HundrethDigit != 0)
  1480  000DA2  500D               	movf	disp_Res@HundrethDigit^0,w,c
  1481  000DA4  B4D8               	btfsc	status,2,c
  1482  000DA6  EFD7  F006         	goto	u361
  1483  000DAA  EFD9  F006         	goto	u360
  1484  000DAE                     u361:
  1485  000DAE  EFDD  F006         	goto	l1786
  1486  000DB2                     u360:
  1487  000DB2                     
  1488                           ;main.c: 112:         send_to_LCD(HundrethDigit+'0');
  1489  000DB2  500D               	movf	disp_Res@HundrethDigit^0,w,c
  1490  000DB4  0F30               	addlw	48
  1491  000DB6  ECD3  F007         	call	_send_to_LCD
  1492  000DBA                     l1786:
  1493                           
  1494                           ;main.c: 113:     if (TenthDigit != 0)
  1495  000DBA  500C               	movf	disp_Res@TenthDigit^0,w,c
  1496  000DBC  B4D8               	btfsc	status,2,c
  1497  000DBE  EFE3  F006         	goto	u371
  1498  000DC2  EFE5  F006         	goto	u370
  1499  000DC6                     u371:
  1500  000DC6  EFE9  F006         	goto	l1790
  1501  000DCA                     u370:
  1502  000DCA                     
  1503                           ;main.c: 114:         send_to_LCD(TenthDigit+'0');
  1504  000DCA  500C               	movf	disp_Res@TenthDigit^0,w,c
  1505  000DCC  0F30               	addlw	48
  1506  000DCE  ECD3  F007         	call	_send_to_LCD
  1507  000DD2                     l1790:
  1508                           
  1509                           ;main.c: 115:     UnitDigit = numb - TenthDigit*10;
  1510  000DD2  500C               	movf	disp_Res@TenthDigit^0,w,c
  1511  000DD4  0DF6               	mullw	246
  1512  000DD6  50F3               	movf	243,w,c
  1513  000DD8  2409               	addwf	disp_Res@numb^0,w,c
  1514  000DDA  6E0B               	movwf	disp_Res@UnitDigit^0,c
  1515  000DDC                     
  1516                           ;main.c: 116:     send_to_LCD(UnitDigit+'0');
  1517  000DDC  500B               	movf	disp_Res@UnitDigit^0,w,c
  1518  000DDE  0F30               	addlw	48
  1519  000DE0  ECD3  F007         	call	_send_to_LCD
  1520  000DE4  0012               	return		;funcret
  1521  000DE6                     __end_of_disp_Res:
  1522                           	callstack 0
  1523                           
  1524 ;; *************** function _write_string_LCD *****************
  1525 ;; Defined at:
  1526 ;;		line 40 in file "LCD.c"
  1527 ;; Parameters:    Size  Location     Type
  1528 ;;  s               2    3[COMRAM] PTR const unsigned char 
  1529 ;;		 -> STR_4(13), STR_3(16), STR_2(13), STR_1(2), 
  1530 ;; Auto vars:     Size  Location     Type
  1531 ;;		None
  1532 ;; Return value:  Size  Location     Type
  1533 ;;                  1    wreg      void 
  1534 ;; Registers used:
  1535 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1536 ;; Tracked objects:
  1537 ;;		On entry : 0/0
  1538 ;;		On exit  : 0/0
  1539 ;;		Unchanged: 0/0
  1540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1541 ;;      Params:         2       0       0       0       0       0       0       0       0
  1542 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1543 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1544 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1545 ;;Total ram usage:        2 bytes
  1546 ;; Hardware stack levels used: 1
  1547 ;; Hardware stack levels required when called: 1
  1548 ;; This function calls:
  1549 ;;		_send_to_LCD
  1550 ;; This function is called by:
  1551 ;;		_disp_Res
  1552 ;;		_disp_Error
  1553 ;; This function uses a non-reentrant model
  1554 ;;
  1555                           
  1556                           	psect	text8
  1557  000F70                     __ptext8:
  1558                           	callstack 0
  1559  000F70                     _write_string_LCD:
  1560                           	callstack 27
  1561  000F70                     
  1562                           ;LCD.c: 41:     while(*s)
  1563  000F70  EFC4  F007         	goto	l1452
  1564  000F74                     l1448:
  1565                           
  1566                           ;LCD.c: 42:         send_to_LCD(*s++);
  1567  000F74  C004  FFF6         	movff	write_string_LCD@s,tblptrl
  1568  000F78  C005  FFF7         	movff	write_string_LCD@s+1,tblptrh
  1569  000F7C                     	if	0	;tblptru may be non-zero
  1570  000F7C                     	endif
  1571  000F7C                     	if	0	;tblptru may be non-zero
  1572  000F7C                     	endif
  1573  000F7C  0008               	tblrd		*
  1574  000F7E  50F5               	movf	tablat,w,c
  1575  000F80  ECD3  F007         	call	_send_to_LCD
  1576  000F84  4A04               	infsnz	write_string_LCD@s^0,f,c
  1577  000F86  2A05               	incf	(write_string_LCD@s+1)^0,f,c
  1578  000F88                     l1452:
  1579                           
  1580                           ;LCD.c: 41:     while(*s)
  1581  000F88  C004  FFF6         	movff	write_string_LCD@s,tblptrl
  1582  000F8C  C005  FFF7         	movff	write_string_LCD@s+1,tblptrh
  1583  000F90                     	if	0	;tblptru may be non-zero
  1584  000F90                     	endif
  1585  000F90                     	if	0	;tblptru may be non-zero
  1586  000F90                     	endif
  1587  000F90  0008               	tblrd		*
  1588  000F92  50F5               	movf	tablat,w,c
  1589  000F94  0900               	iorlw	0
  1590  000F96  A4D8               	btfss	status,2,c
  1591  000F98  EFD0  F007         	goto	u221
  1592  000F9C  EFD2  F007         	goto	u220
  1593  000FA0                     u221:
  1594  000FA0  EFBA  F007         	goto	l1448
  1595  000FA4                     u220:
  1596  000FA4  0012               	return		;funcret
  1597  000FA6                     __end_of_write_string_LCD:
  1598                           	callstack 0
  1599                           
  1600 ;; *************** function _send_to_LCD *****************
  1601 ;; Defined at:
  1602 ;;		line 30 in file "LCD.c"
  1603 ;; Parameters:    Size  Location     Type
  1604 ;;  xy              1    wreg     unsigned char 
  1605 ;; Auto vars:     Size  Location     Type
  1606 ;;  xy              1    2[COMRAM] unsigned char 
  1607 ;; Return value:  Size  Location     Type
  1608 ;;                  1    wreg      void 
  1609 ;; Registers used:
  1610 ;;		wreg, status,2, cstack
  1611 ;; Tracked objects:
  1612 ;;		On entry : 0/0
  1613 ;;		On exit  : 0/0
  1614 ;;		Unchanged: 0/0
  1615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1616 ;;      Params:         0       0       0       0       0       0       0       0       0
  1617 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1618 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1619 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1620 ;;Total ram usage:        3 bytes
  1621 ;; Hardware stack levels used: 1
  1622 ;; This function calls:
  1623 ;;		Nothing
  1624 ;; This function is called by:
  1625 ;;		_write_string_LCD
  1626 ;;		_main
  1627 ;;		_disp_Res
  1628 ;; This function uses a non-reentrant model
  1629 ;;
  1630                           
  1631                           	psect	text9
  1632  000FA6                     __ptext9:
  1633                           	callstack 0
  1634  000FA6                     _send_to_LCD:
  1635                           	callstack 30
  1636                           
  1637                           ;incstack = 0
  1638                           ;send_to_LCD@xy stored from wreg
  1639  000FA6  6E03               	movwf	send_to_LCD@xy^0,c
  1640  000FA8                     
  1641                           ;LCD.c: 31:     LATCbits.LATC2 = 1;
  1642  000FA8  848B               	bsf	139,2,c	;volatile
  1643                           
  1644                           ;LCD.c: 32:     LATCbits.LATC1 = 0;
  1645  000FAA  928B               	bcf	139,1,c	;volatile
  1646                           
  1647                           ;LCD.c: 33:     LATCbits.LATC0 = 1;
  1648  000FAC  808B               	bsf	139,0,c	;volatile
  1649  000FAE                     
  1650                           ;LCD.c: 34:     LATD = xy;
  1651  000FAE  C003  FF8C         	movff	send_to_LCD@xy,3980	;volatile
  1652  000FB2                     
  1653                           ;LCD.c: 35:     __nop();
  1654  000FB2  F000               	nop	
  1655  000FB4                     
  1656                           ;LCD.c: 36:     __nop();
  1657  000FB4  F000               	nop	
  1658  000FB6                     
  1659                           ;LCD.c: 37:     LATCbits.LATC0 = 0;
  1660  000FB6  908B               	bcf	139,0,c	;volatile
  1661  000FB8                     
  1662                           ;LCD.c: 38:     _delay((unsigned long)((250)*(8000000/4000.0)));
  1663  000FB8  0E03               	movlw	3
  1664  000FBA  6E02               	movwf	(??_send_to_LCD+1)^0,c
  1665  000FBC  0E8A               	movlw	138
  1666  000FBE  6E01               	movwf	??_send_to_LCD^0,c
  1667  000FC0  0E56               	movlw	86
  1668  000FC2                     u447:
  1669  000FC2  2EE8               	decfsz	wreg,f,c
  1670  000FC4  D7FE               	bra	u447
  1671  000FC6  2E01               	decfsz	??_send_to_LCD^0,f,c
  1672  000FC8  D7FC               	bra	u447
  1673  000FCA  2E02               	decfsz	(??_send_to_LCD+1)^0,f,c
  1674  000FCC  D7FA               	bra	u447
  1675  000FCE  0012               	return		;funcret
  1676  000FD0                     __end_of_send_to_LCD:
  1677                           	callstack 0
  1678                           
  1679 ;; *************** function ___wmul *****************
  1680 ;; Defined at:
  1681 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\Umul16.c"
  1682 ;; Parameters:    Size  Location     Type
  1683 ;;  multiplier      2    0[COMRAM] unsigned int 
  1684 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1685 ;; Auto vars:     Size  Location     Type
  1686 ;;  product         2    4[COMRAM] unsigned int 
  1687 ;; Return value:  Size  Location     Type
  1688 ;;                  2    0[COMRAM] unsigned int 
  1689 ;; Registers used:
  1690 ;;		wreg, status,2, status,0, prodl, prodh
  1691 ;; Tracked objects:
  1692 ;;		On entry : 0/0
  1693 ;;		On exit  : 0/0
  1694 ;;		Unchanged: 0/0
  1695 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1696 ;;      Params:         4       0       0       0       0       0       0       0       0
  1697 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1698 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1699 ;;      Totals:         6       0       0       0       0       0       0       0       0
  1700 ;;Total ram usage:        6 bytes
  1701 ;; Hardware stack levels used: 1
  1702 ;; This function calls:
  1703 ;;		Nothing
  1704 ;; This function is called by:
  1705 ;;		_main
  1706 ;;		_disp_Res
  1707 ;; This function uses a non-reentrant model
  1708 ;;
  1709                           
  1710                           	psect	text10
  1711  000FD0                     __ptext10:
  1712                           	callstack 0
  1713  000FD0                     ___wmul:
  1714                           	callstack 29
  1715  000FD0  5001               	movf	___wmul@multiplier^0,w,c
  1716  000FD2  0203               	mulwf	___wmul@multiplicand^0,c
  1717  000FD4  CFF3 F005          	movff	prodl,___wmul@product
  1718  000FD8  CFF4 F006          	movff	prodh,___wmul@product+1
  1719  000FDC  5001               	movf	___wmul@multiplier^0,w,c
  1720  000FDE  0204               	mulwf	(___wmul@multiplicand+1)^0,c
  1721  000FE0  50F3               	movf	243,w,c
  1722  000FE2  2606               	addwf	(___wmul@product+1)^0,f,c
  1723  000FE4  5002               	movf	(___wmul@multiplier+1)^0,w,c
  1724  000FE6  0203               	mulwf	___wmul@multiplicand^0,c
  1725  000FE8  50F3               	movf	243,w,c
  1726  000FEA  2606               	addwf	(___wmul@product+1)^0,f,c
  1727  000FEC  C005  F001         	movff	___wmul@product,?___wmul
  1728  000FF0  C006  F002         	movff	___wmul@product+1,?___wmul+1
  1729  000FF4  0012               	return		;funcret
  1730  000FF6                     __end_of___wmul:
  1731                           	callstack 0
  1732                           
  1733 ;; *************** function ___awdiv *****************
  1734 ;; Defined at:
  1735 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c99\common\awdiv.c"
  1736 ;; Parameters:    Size  Location     Type
  1737 ;;  dividend        2    0[COMRAM] int 
  1738 ;;  divisor         2    2[COMRAM] int 
  1739 ;; Auto vars:     Size  Location     Type
  1740 ;;  quotient        2    6[COMRAM] int 
  1741 ;;  sign            1    5[COMRAM] unsigned char 
  1742 ;;  counter         1    4[COMRAM] unsigned char 
  1743 ;; Return value:  Size  Location     Type
  1744 ;;                  2    0[COMRAM] int 
  1745 ;; Registers used:
  1746 ;;		wreg, status,2, status,0
  1747 ;; Tracked objects:
  1748 ;;		On entry : 0/0
  1749 ;;		On exit  : 0/0
  1750 ;;		Unchanged: 0/0
  1751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1752 ;;      Params:         4       0       0       0       0       0       0       0       0
  1753 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1754 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1755 ;;      Totals:         8       0       0       0       0       0       0       0       0
  1756 ;;Total ram usage:        8 bytes
  1757 ;; Hardware stack levels used: 1
  1758 ;; This function calls:
  1759 ;;		Nothing
  1760 ;; This function is called by:
  1761 ;;		_main
  1762 ;;		_disp_Res
  1763 ;; This function uses a non-reentrant model
  1764 ;;
  1765                           
  1766                           	psect	text11
  1767  000C66                     __ptext11:
  1768                           	callstack 0
  1769  000C66                     ___awdiv:
  1770                           	callstack 29
  1771  000C66  0E00               	movlw	0
  1772  000C68  6E06               	movwf	___awdiv@sign^0,c
  1773  000C6A  BE04               	btfsc	(___awdiv@divisor+1)^0,7,c
  1774  000C6C  EF3C  F006         	goto	u230
  1775  000C70  EF3A  F006         	goto	u231
  1776  000C74                     u231:
  1777  000C74  EF42  F006         	goto	l1626
  1778  000C78                     u230:
  1779  000C78  6C03               	negf	___awdiv@divisor^0,c
  1780  000C7A  1E04               	comf	(___awdiv@divisor+1)^0,f,c
  1781  000C7C  B0D8               	btfsc	status,0,c
  1782  000C7E  2A04               	incf	(___awdiv@divisor+1)^0,f,c
  1783  000C80  0E01               	movlw	1
  1784  000C82  6E06               	movwf	___awdiv@sign^0,c
  1785  000C84                     l1626:
  1786  000C84  BE02               	btfsc	(___awdiv@dividend+1)^0,7,c
  1787  000C86  EF49  F006         	goto	u240
  1788  000C8A  EF47  F006         	goto	u241
  1789  000C8E                     u241:
  1790  000C8E  EF4F  F006         	goto	l1632
  1791  000C92                     u240:
  1792  000C92  6C01               	negf	___awdiv@dividend^0,c
  1793  000C94  1E02               	comf	(___awdiv@dividend+1)^0,f,c
  1794  000C96  B0D8               	btfsc	status,0,c
  1795  000C98  2A02               	incf	(___awdiv@dividend+1)^0,f,c
  1796  000C9A  0E01               	movlw	1
  1797  000C9C  1A06               	xorwf	___awdiv@sign^0,f,c
  1798  000C9E                     l1632:
  1799  000C9E  0E00               	movlw	0
  1800  000CA0  6E08               	movwf	(___awdiv@quotient+1)^0,c
  1801  000CA2  0E00               	movlw	0
  1802  000CA4  6E07               	movwf	___awdiv@quotient^0,c
  1803  000CA6  5003               	movf	___awdiv@divisor^0,w,c
  1804  000CA8  1004               	iorwf	(___awdiv@divisor+1)^0,w,c
  1805  000CAA  B4D8               	btfsc	status,2,c
  1806  000CAC  EF5A  F006         	goto	u251
  1807  000CB0  EF5C  F006         	goto	u250
  1808  000CB4                     u251:
  1809  000CB4  EF84  F006         	goto	l1654
  1810  000CB8                     u250:
  1811  000CB8  0E01               	movlw	1
  1812  000CBA  6E05               	movwf	___awdiv@counter^0,c
  1813  000CBC  EF64  F006         	goto	l1640
  1814  000CC0                     l1638:
  1815  000CC0  90D8               	bcf	status,0,c
  1816  000CC2  3603               	rlcf	___awdiv@divisor^0,f,c
  1817  000CC4  3604               	rlcf	(___awdiv@divisor+1)^0,f,c
  1818  000CC6  2A05               	incf	___awdiv@counter^0,f,c
  1819  000CC8                     l1640:
  1820  000CC8  AE04               	btfss	(___awdiv@divisor+1)^0,7,c
  1821  000CCA  EF69  F006         	goto	u261
  1822  000CCE  EF6B  F006         	goto	u260
  1823  000CD2                     u261:
  1824  000CD2  EF60  F006         	goto	l1638
  1825  000CD6                     u260:
  1826  000CD6                     l1642:
  1827  000CD6  90D8               	bcf	status,0,c
  1828  000CD8  3607               	rlcf	___awdiv@quotient^0,f,c
  1829  000CDA  3608               	rlcf	(___awdiv@quotient+1)^0,f,c
  1830  000CDC  5003               	movf	___awdiv@divisor^0,w,c
  1831  000CDE  5C01               	subwf	___awdiv@dividend^0,w,c
  1832  000CE0  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1833  000CE2  5802               	subwfb	(___awdiv@dividend+1)^0,w,c
  1834  000CE4  A0D8               	btfss	status,0,c
  1835  000CE6  EF77  F006         	goto	u271
  1836  000CEA  EF79  F006         	goto	u270
  1837  000CEE                     u271:
  1838  000CEE  EF7E  F006         	goto	l1650
  1839  000CF2                     u270:
  1840  000CF2  5003               	movf	___awdiv@divisor^0,w,c
  1841  000CF4  5E01               	subwf	___awdiv@dividend^0,f,c
  1842  000CF6  5004               	movf	(___awdiv@divisor+1)^0,w,c
  1843  000CF8  5A02               	subwfb	(___awdiv@dividend+1)^0,f,c
  1844  000CFA  8007               	bsf	___awdiv@quotient^0,0,c
  1845  000CFC                     l1650:
  1846  000CFC  90D8               	bcf	status,0,c
  1847  000CFE  3204               	rrcf	(___awdiv@divisor+1)^0,f,c
  1848  000D00  3203               	rrcf	___awdiv@divisor^0,f,c
  1849  000D02  2E05               	decfsz	___awdiv@counter^0,f,c
  1850  000D04  EF6B  F006         	goto	l1642
  1851  000D08                     l1654:
  1852  000D08  5006               	movf	___awdiv@sign^0,w,c
  1853  000D0A  B4D8               	btfsc	status,2,c
  1854  000D0C  EF8A  F006         	goto	u281
  1855  000D10  EF8C  F006         	goto	u280
  1856  000D14                     u281:
  1857  000D14  EF90  F006         	goto	l1658
  1858  000D18                     u280:
  1859  000D18  6C07               	negf	___awdiv@quotient^0,c
  1860  000D1A  1E08               	comf	(___awdiv@quotient+1)^0,f,c
  1861  000D1C  B0D8               	btfsc	status,0,c
  1862  000D1E  2A08               	incf	(___awdiv@quotient+1)^0,f,c
  1863  000D20                     l1658:
  1864  000D20  C007  F001         	movff	___awdiv@quotient,?___awdiv
  1865  000D24  C008  F002         	movff	___awdiv@quotient+1,?___awdiv+1
  1866  000D28  0012               	return		;funcret
  1867  000D2A                     __end_of___awdiv:
  1868                           	callstack 0
  1869                           
  1870 ;; *************** function _LCD_init *****************
  1871 ;; Defined at:
  1872 ;;		line 5 in file "LCD.c"
  1873 ;; Parameters:    Size  Location     Type
  1874 ;;		None
  1875 ;; Auto vars:     Size  Location     Type
  1876 ;;		None
  1877 ;; Return value:  Size  Location     Type
  1878 ;;                  1    wreg      void 
  1879 ;; Registers used:
  1880 ;;		wreg, status,2, cstack
  1881 ;; Tracked objects:
  1882 ;;		On entry : 0/0
  1883 ;;		On exit  : 0/0
  1884 ;;		Unchanged: 0/0
  1885 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1886 ;;      Params:         0       0       0       0       0       0       0       0       0
  1887 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1888 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1889 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1890 ;;Total ram usage:        2 bytes
  1891 ;; Hardware stack levels used: 1
  1892 ;; Hardware stack levels required when called: 1
  1893 ;; This function calls:
  1894 ;;		_LCD_cmd
  1895 ;; This function is called by:
  1896 ;;		_main
  1897 ;; This function uses a non-reentrant model
  1898 ;;
  1899                           
  1900                           	psect	text12
  1901  000E62                     __ptext12:
  1902                           	callstack 0
  1903  000E62                     _LCD_init:
  1904                           	callstack 29
  1905  000E62                     
  1906                           ;LCD.c: 6:     TRISD = 0x00;
  1907  000E62  0E00               	movlw	0
  1908  000E64  6E95               	movwf	149,c	;volatile
  1909  000E66                     
  1910                           ;LCD.c: 7:     LATCbits.LATC2 = 0;
  1911  000E66  948B               	bcf	139,2,c	;volatile
  1912  000E68                     
  1913                           ;LCD.c: 8:     LATCbits.LATC1 = 0;
  1914  000E68  928B               	bcf	139,1,c	;volatile
  1915  000E6A                     
  1916                           ;LCD.c: 9:     LATCbits.LATC0 = 0;
  1917  000E6A  908B               	bcf	139,0,c	;volatile
  1918                           
  1919                           ;LCD.c: 10:     LATC = 0;
  1920  000E6C  0E00               	movlw	0
  1921  000E6E  6E8B               	movwf	139,c	;volatile
  1922  000E70                     
  1923                           ;LCD.c: 11:     TRISCbits.TRISC0 = 0;
  1924  000E70  9094               	bcf	148,0,c	;volatile
  1925  000E72                     
  1926                           ;LCD.c: 12:     TRISCbits.TRISC2 = 0;
  1927  000E72  9494               	bcf	148,2,c	;volatile
  1928  000E74                     
  1929                           ;LCD.c: 13:     TRISCbits.TRISC1 = 0;
  1930  000E74  9294               	bcf	148,1,c	;volatile
  1931  000E76                     
  1932                           ;LCD.c: 14:     LCD_cmd(0b00111000);
  1933  000E76  0E38               	movlw	56
  1934  000E78  EC06  F008         	call	_LCD_cmd
  1935  000E7C                     
  1936                           ;LCD.c: 15:     _delay((unsigned long)((250)*(8000000/4000.0)));
  1937  000E7C  0E03               	movlw	3
  1938  000E7E  6E03               	movwf	(??_LCD_init+1)^0,c
  1939  000E80  0E8A               	movlw	138
  1940  000E82  6E02               	movwf	??_LCD_init^0,c
  1941  000E84  0E56               	movlw	86
  1942  000E86                     u457:
  1943  000E86  2EE8               	decfsz	wreg,f,c
  1944  000E88  D7FE               	bra	u457
  1945  000E8A  2E02               	decfsz	??_LCD_init^0,f,c
  1946  000E8C  D7FC               	bra	u457
  1947  000E8E  2E03               	decfsz	(??_LCD_init+1)^0,f,c
  1948  000E90  D7FA               	bra	u457
  1949  000E92                     
  1950                           ;LCD.c: 16:     LCD_cmd(0b00001110);
  1951  000E92  0E0E               	movlw	14
  1952  000E94  EC06  F008         	call	_LCD_cmd
  1953  000E98                     
  1954                           ;LCD.c: 17:     _delay((unsigned long)((250)*(8000000/4000.0)));
  1955  000E98  0E03               	movlw	3
  1956  000E9A  6E03               	movwf	(??_LCD_init+1)^0,c
  1957  000E9C  0E8A               	movlw	138
  1958  000E9E  6E02               	movwf	??_LCD_init^0,c
  1959  000EA0  0E56               	movlw	86
  1960  000EA2                     u467:
  1961  000EA2  2EE8               	decfsz	wreg,f,c
  1962  000EA4  D7FE               	bra	u467
  1963  000EA6  2E02               	decfsz	??_LCD_init^0,f,c
  1964  000EA8  D7FC               	bra	u467
  1965  000EAA  2E03               	decfsz	(??_LCD_init+1)^0,f,c
  1966  000EAC  D7FA               	bra	u467
  1967  000EAE                     
  1968                           ;LCD.c: 18:     LCD_cmd(0b00000001);
  1969  000EAE  0E01               	movlw	1
  1970  000EB0  EC06  F008         	call	_LCD_cmd
  1971  000EB4                     
  1972                           ;LCD.c: 19:     _delay((unsigned long)((250)*(8000000/4000.0)));
  1973  000EB4  0E03               	movlw	3
  1974  000EB6  6E03               	movwf	(??_LCD_init+1)^0,c
  1975  000EB8  0E8A               	movlw	138
  1976  000EBA  6E02               	movwf	??_LCD_init^0,c
  1977  000EBC  0E56               	movlw	86
  1978  000EBE                     u477:
  1979  000EBE  2EE8               	decfsz	wreg,f,c
  1980  000EC0  D7FE               	bra	u477
  1981  000EC2  2E02               	decfsz	??_LCD_init^0,f,c
  1982  000EC4  D7FC               	bra	u477
  1983  000EC6  2E03               	decfsz	(??_LCD_init+1)^0,f,c
  1984  000EC8  D7FA               	bra	u477
  1985  000ECA  0012               	return		;funcret
  1986  000ECC                     __end_of_LCD_init:
  1987                           	callstack 0
  1988                           
  1989 ;; *************** function _LCD_cmd *****************
  1990 ;; Defined at:
  1991 ;;		line 21 in file "LCD.c"
  1992 ;; Parameters:    Size  Location     Type
  1993 ;;  cx              1    wreg     unsigned char 
  1994 ;; Auto vars:     Size  Location     Type
  1995 ;;  cx              1    0[COMRAM] unsigned char 
  1996 ;; Return value:  Size  Location     Type
  1997 ;;                  1    wreg      void 
  1998 ;; Registers used:
  1999 ;;		wreg
  2000 ;; Tracked objects:
  2001 ;;		On entry : 0/0
  2002 ;;		On exit  : 0/0
  2003 ;;		Unchanged: 0/0
  2004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2005 ;;      Params:         0       0       0       0       0       0       0       0       0
  2006 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2007 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2008 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2009 ;;Total ram usage:        1 bytes
  2010 ;; Hardware stack levels used: 1
  2011 ;; This function calls:
  2012 ;;		Nothing
  2013 ;; This function is called by:
  2014 ;;		_LCD_init
  2015 ;;		_main
  2016 ;;		_get_Num
  2017 ;;		_get_Func
  2018 ;;		_disp_Error
  2019 ;; This function uses a non-reentrant model
  2020 ;;
  2021                           
  2022                           	psect	text13
  2023  00100C                     __ptext13:
  2024                           	callstack 0
  2025  00100C                     _LCD_cmd:
  2026                           	callstack 28
  2027                           
  2028                           ;incstack = 0
  2029                           ;LCD_cmd@cx stored from wreg
  2030  00100C  6E01               	movwf	LCD_cmd@cx^0,c
  2031  00100E                     
  2032                           ;LCD.c: 22:     LATCbits.LATC2 = 0;
  2033  00100E  948B               	bcf	139,2,c	;volatile
  2034                           
  2035                           ;LCD.c: 23:     LATCbits.LATC1 = 0;
  2036  001010  928B               	bcf	139,1,c	;volatile
  2037                           
  2038                           ;LCD.c: 24:     LATCbits.LATC0 = 1;
  2039  001012  808B               	bsf	139,0,c	;volatile
  2040                           
  2041                           ;LCD.c: 25:     __nop();
  2042  001014  F000               	nop	
  2043  001016                     
  2044                           ;LCD.c: 26:     LATD = cx;
  2045  001016  C001  FF8C         	movff	LCD_cmd@cx,3980	;volatile
  2046  00101A                     
  2047                           ;LCD.c: 27:     __nop();
  2048  00101A  F000               	nop	
  2049  00101C                     
  2050                           ;LCD.c: 28:     LATCbits.LATC0 = 0;
  2051  00101C  908B               	bcf	139,0,c	;volatile
  2052  00101E  0012               	return		;funcret
  2053  001020                     __end_of_LCD_cmd:
  2054                           	callstack 0
  2055                           
  2056                           	psect	rparam
  2057  0000                     
  2058                           	psect	idloc
  2059                           
  2060                           ;Config register IDLOC0 @ 0x200000
  2061                           ;	unspecified, using default values
  2062  200000                     	org	2097152
  2063  200000  FF                 	db	255
  2064                           
  2065                           ;Config register IDLOC1 @ 0x200001
  2066                           ;	unspecified, using default values
  2067  200001                     	org	2097153
  2068  200001  FF                 	db	255
  2069                           
  2070                           ;Config register IDLOC2 @ 0x200002
  2071                           ;	unspecified, using default values
  2072  200002                     	org	2097154
  2073  200002  FF                 	db	255
  2074                           
  2075                           ;Config register IDLOC3 @ 0x200003
  2076                           ;	unspecified, using default values
  2077  200003                     	org	2097155
  2078  200003  FF                 	db	255
  2079                           
  2080                           ;Config register IDLOC4 @ 0x200004
  2081                           ;	unspecified, using default values
  2082  200004                     	org	2097156
  2083  200004  FF                 	db	255
  2084                           
  2085                           ;Config register IDLOC5 @ 0x200005
  2086                           ;	unspecified, using default values
  2087  200005                     	org	2097157
  2088  200005  FF                 	db	255
  2089                           
  2090                           ;Config register IDLOC6 @ 0x200006
  2091                           ;	unspecified, using default values
  2092  200006                     	org	2097158
  2093  200006  FF                 	db	255
  2094                           
  2095                           ;Config register IDLOC7 @ 0x200007
  2096                           ;	unspecified, using default values
  2097  200007                     	org	2097159
  2098  200007  FF                 	db	255
  2099                           
  2100                           	psect	config
  2101                           
  2102                           ;Config register CONFIG1L @ 0x300000
  2103                           ;	PLL Selection
  2104                           ;	PLLSEL = PLL4X, 4x clock multiplier
  2105                           ;	PLL Enable Configuration bit
  2106                           ;	CFGPLLEN = OFF, PLL Disabled (firmware controlled)
  2107                           ;	CPU System Clock Postscaler
  2108                           ;	CPUDIV = NOCLKDIV, CPU uses system clock (no divide)
  2109                           ;	Low Speed USB mode with 48 MHz system clock
  2110                           ;	LS48MHZ = SYS24X4, System clock at 24 MHz, USB clock divider is set to 4
  2111  300000                     	org	3145728
  2112  300000  00                 	db	0
  2113                           
  2114                           ;Config register CONFIG1H @ 0x300001
  2115                           ;	Oscillator Selection
  2116                           ;	FOSC = INTOSCIO, Internal oscillator
  2117                           ;	Primary Oscillator Shutdown
  2118                           ;	PCLKEN = ON, Primary oscillator enabled
  2119                           ;	Fail-Safe Clock Monitor
  2120                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2121                           ;	Internal/External Oscillator Switchover
  2122                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2123  300001                     	org	3145729
  2124  300001  28                 	db	40
  2125                           
  2126                           ;Config register CONFIG2L @ 0x300002
  2127                           ;	Power-up Timer Enable
  2128                           ;	nPWRTEN = OFF, Power up timer disabled
  2129                           ;	Brown-out Reset Enable
  2130                           ;	BOREN = SBORDIS, BOR enabled in hardware (SBOREN is ignored)
  2131                           ;	Brown-out Reset Voltage
  2132                           ;	BORV = 190, BOR set to 1.9V nominal
  2133                           ;	Low-Power Brown-out Reset
  2134                           ;	nLPBOR = OFF, Low-Power Brown-out Reset disabled
  2135  300002                     	org	3145730
  2136  300002  5F                 	db	95
  2137                           
  2138                           ;Config register CONFIG2H @ 0x300003
  2139                           ;	Watchdog Timer Enable bits
  2140                           ;	WDTEN = OFF, WDT disabled in hardware (SWDTEN ignored)
  2141                           ;	Watchdog Timer Postscaler
  2142                           ;	WDTPS = 32768, 1:32768
  2143  300003                     	org	3145731
  2144  300003  3C                 	db	60
  2145                           
  2146                           ; Padding undefined space
  2147  300004                     	org	3145732
  2148  300004  FF                 	db	255
  2149                           
  2150                           ;Config register CONFIG3H @ 0x300005
  2151                           ;	CCP2 MUX bit
  2152                           ;	CCP2MX = RC1, CCP2 input/output is multiplexed with RC1
  2153                           ;	PORTB A/D Enable bit
  2154                           ;	PBADEN = ON, PORTB<5:0> pins are configured as analog input channels on Reset
  2155                           ;	Timer3 Clock Input MUX bit
  2156                           ;	T3CMX = RC0, T3CKI function is on RC0
  2157                           ;	SDO Output MUX bit
  2158                           ;	SDOMX = RB3, SDO function is on RB3
  2159                           ;	Master Clear Reset Pin Enable
  2160                           ;	MCLRE = ON, MCLR pin enabled; RE3 input disabled
  2161  300005                     	org	3145733
  2162  300005  D3                 	db	211
  2163                           
  2164                           ;Config register CONFIG4L @ 0x300006
  2165                           ;	Stack Full/Underflow Reset
  2166                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2167                           ;	Single-Supply ICSP Enable bit
  2168                           ;	LVP = ON, Single-Supply ICSP enabled if MCLRE is also 1
  2169                           ;	Dedicated In-Circuit Debug/Programming Port Enable
  2170                           ;	ICPRT = OFF, ICPORT disabled
  2171                           ;	Extended Instruction Set Enable bit
  2172                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled
  2173                           ;	Background Debugger Enable bit
  2174                           ;	DEBUG = 0x1, unprogrammed default
  2175  300006                     	org	3145734
  2176  300006  85                 	db	133
  2177                           
  2178                           ; Padding undefined space
  2179  300007                     	org	3145735
  2180  300007  FF                 	db	255
  2181                           
  2182                           ;Config register CONFIG5L @ 0x300008
  2183                           ;	Block 0 Code Protect
  2184                           ;	CP0 = OFF, Block 0 is not code-protected
  2185                           ;	Block 1 Code Protect
  2186                           ;	CP1 = OFF, Block 1 is not code-protected
  2187                           ;	Block 2 Code Protect
  2188                           ;	CP2 = OFF, Block 2 is not code-protected
  2189                           ;	Block 3 Code Protect
  2190                           ;	CP3 = OFF, Block 3 is not code-protected
  2191  300008                     	org	3145736
  2192  300008  0F                 	db	15
  2193                           
  2194                           ;Config register CONFIG5H @ 0x300009
  2195                           ;	Boot Block Code Protect
  2196                           ;	CPB = OFF, Boot block is not code-protected
  2197                           ;	Data EEPROM Code Protect
  2198                           ;	CPD = OFF, Data EEPROM is not code-protected
  2199  300009                     	org	3145737
  2200  300009  C0                 	db	192
  2201                           
  2202                           ;Config register CONFIG6L @ 0x30000A
  2203                           ;	Block 0 Write Protect
  2204                           ;	WRT0 = OFF, Block 0 (0800-1FFFh) is not write-protected
  2205                           ;	Block 1 Write Protect
  2206                           ;	WRT1 = OFF, Block 1 (2000-3FFFh) is not write-protected
  2207                           ;	Block 2 Write Protect
  2208                           ;	WRT2 = OFF, Block 2 (04000-5FFFh) is not write-protected
  2209                           ;	Block 3 Write Protect
  2210                           ;	WRT3 = OFF, Block 3 (06000-7FFFh) is not write-protected
  2211  30000A                     	org	3145738
  2212  30000A  0F                 	db	15
  2213                           
  2214                           ;Config register CONFIG6H @ 0x30000B
  2215                           ;	Configuration Registers Write Protect
  2216                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  2217                           ;	Boot Block Write Protect
  2218                           ;	WRTB = OFF, Boot block (0000-7FFh) is not write-protected
  2219                           ;	Data EEPROM Write Protect
  2220                           ;	WRTD = OFF, Data EEPROM is not write-protected
  2221  30000B                     	org	3145739
  2222  30000B  E0                 	db	224
  2223                           
  2224                           ;Config register CONFIG7L @ 0x30000C
  2225                           ;	Block 0 Table Read Protect
  2226                           ;	EBTR0 = OFF, Block 0 is not protected from table reads executed in other blocks
  2227                           ;	Block 1 Table Read Protect
  2228                           ;	EBTR1 = OFF, Block 1 is not protected from table reads executed in other blocks
  2229                           ;	Block 2 Table Read Protect
  2230                           ;	EBTR2 = OFF, Block 2 is not protected from table reads executed in other blocks
  2231                           ;	Block 3 Table Read Protect
  2232                           ;	EBTR3 = OFF, Block 3 is not protected from table reads executed in other blocks
  2233  30000C                     	org	3145740
  2234  30000C  0F                 	db	15
  2235                           
  2236                           ;Config register CONFIG7H @ 0x30000D
  2237                           ;	Boot Block Table Read Protect
  2238                           ;	EBTRB = OFF, Boot block is not protected from table reads executed in other blocks
  2239  30000D                     	org	3145741
  2240  30000D  40                 	db	64
  2241                           tosu	equ	0xFFF
  2242                           tosh	equ	0xFFE
  2243                           tosl	equ	0xFFD
  2244                           stkptr	equ	0xFFC
  2245                           pclatu	equ	0xFFB
  2246                           pclath	equ	0xFFA
  2247                           pcl	equ	0xFF9
  2248                           tblptru	equ	0xFF8
  2249                           tblptrh	equ	0xFF7
  2250                           tblptrl	equ	0xFF6
  2251                           tablat	equ	0xFF5
  2252                           prodh	equ	0xFF4
  2253                           prodl	equ	0xFF3
  2254                           indf0	equ	0xFEF
  2255                           postinc0	equ	0xFEE
  2256                           postdec0	equ	0xFED
  2257                           preinc0	equ	0xFEC
  2258                           plusw0	equ	0xFEB
  2259                           fsr0h	equ	0xFEA
  2260                           fsr0l	equ	0xFE9
  2261                           wreg	equ	0xFE8
  2262                           indf1	equ	0xFE7
  2263                           postinc1	equ	0xFE6
  2264                           postdec1	equ	0xFE5
  2265                           preinc1	equ	0xFE4
  2266                           plusw1	equ	0xFE3
  2267                           fsr1h	equ	0xFE2
  2268                           fsr1l	equ	0xFE1
  2269                           bsr	equ	0xFE0
  2270                           indf2	equ	0xFDF
  2271                           postinc2	equ	0xFDE
  2272                           postdec2	equ	0xFDD
  2273                           preinc2	equ	0xFDC
  2274                           plusw2	equ	0xFDB
  2275                           fsr2h	equ	0xFDA
  2276                           fsr2l	equ	0xFD9
  2277                           status	equ	0xFD8

Data Sizes:
    Strings     31
    Constant    0
    Data        0
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     22      28
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    write_string_LCD@s	PTR const unsigned char  size(2) Largest target is 16
		 -> STR_4(CODE[13]), STR_3(CODE[16]), STR_2(CODE[13]), STR_1(CODE[2]), 


Critical Paths under _main in COMRAM

    _main->_get_Num
    _key_get->_key_scanner
    _get_Num->_disp_Error
    _get_Func->_disp_Error
    _disp_Error->_write_string_LCD
    _disp_Res->___awdiv
    _write_string_LCD->_send_to_LCD
    _LCD_init->_LCD_cmd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    5703
                                             16 COMRAM     6     6      0
                            _LCD_cmd
                           _LCD_init
                            ___awdiv
                             ___wmul
                         _disp_Error
                           _disp_Res
                           _get_Func
                            _get_Num
                            _key_get
                           _key_init
                        _send_to_LCD
 ---------------------------------------------------------------------------------
 (1) _key_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _key_get                                              2     2      0       0
                                              2 COMRAM     2     2      0
                        _key_scanner
 ---------------------------------------------------------------------------------
 (2) _key_scanner                                          2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _get_Num                                              7     5      2     722
                                              9 COMRAM     7     5      2
                            _LCD_cmd
                         _disp_Error
 ---------------------------------------------------------------------------------
 (1) _get_Func                                             1     1      0     797
                                              9 COMRAM     1     1      0
                            _LCD_cmd
                         _disp_Error
 ---------------------------------------------------------------------------------
 (2) _disp_Error                                           4     2      2     643
                                              5 COMRAM     4     2      2
                            _LCD_cmd
                   _write_string_LCD
 ---------------------------------------------------------------------------------
 (1) _disp_Res                                             5     3      2    2210
                                              8 COMRAM     5     3      2
                            ___awdiv
                             ___wmul
                        _send_to_LCD
                   _write_string_LCD
 ---------------------------------------------------------------------------------
 (3) _write_string_LCD                                     2     0      2     371
                                              3 COMRAM     2     0      2
                        _send_to_LCD
 ---------------------------------------------------------------------------------
 (1) _send_to_LCD                                          3     3      0      22
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     463
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     756
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             2     2      0      22
                                              1 COMRAM     2     2      0
                            _LCD_cmd
 ---------------------------------------------------------------------------------
 (3) _LCD_cmd                                              1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_cmd
   _LCD_init
     _LCD_cmd
   ___awdiv
   ___wmul
   _disp_Error
     _LCD_cmd
     _write_string_LCD
       _send_to_LCD
   _disp_Res
     ___awdiv
     ___wmul
     _send_to_LCD
     _write_string_LCD
   _get_Func
     _LCD_cmd
     _disp_Error
   _get_Num
     _LCD_cmd
     _disp_Error
   _key_get
     _key_scanner
   _key_init
   _send_to_LCD

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      29        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     16      1C       1       29.5%
BITBIGSFRhhlhl      3D      0       0      22        0.0%
BITBIGSFRhlll       24      0       0      26        0.0%
BITBIGSFRhhlhh      1D      0       0      21        0.0%
BITBIGSFRhhh         E      0       0      20        0.0%
BITBIGSFRl           9      0       0      27        0.0%
BITBIGSFRhlhh        6      0       0      23        0.0%
BITBIGSFRhlhl        4      0       0      24        0.0%
BITBIGSFRhllh        3      0       0      25        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      1C      28        0.0%
DATA                 0      0      1C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Tue May 24 19:57:54 2022

            disp_Res@numb 0009                        l24 0B48                        l19 1030  
                      l52 0F6E                        l71 0ECA                        l74 101E  
                      l83 0FA4                        l77 0FCE              ___awdiv@sign 0006  
     ___wmul@multiplicand 0003            disp_Error@numb 0006                       l120 09D6  
                     l151 0C64                       l162 0DE4                       l170 0F32  
                     l155 0E60                       l139 0C5C                       l404 0D28  
                     l173 0FF4                       u220 0FA4                       u300 0DFA  
                     u221 0FA0                       u301 0DF6                       u230 0C78  
                     u310 0E18                       u231 0C74                       u311 0E14  
                     u240 0C92                       u320 0E2A                       u400 08B0  
                     u241 0C8E                       u321 0E26                       u401 08AC  
                     u250 0CB8                       u330 0E3C                       u410 08CE  
                     u251 0CB4                       u331 0E38                       u411 08CA  
                     u260 0CD6                       u340 0E4E                       u420 09BC  
                     u261 0CD2                       u341 0E4A                       u421 09B8  
                     u270 0CF2                       u350 0D40                       u271 0CEE  
                     u351 0D3C                       u280 0D18                       u360 0DB2  
                     u281 0D14                       u361 0DAE                       u370 0DCA  
                     u290 0F6C                       u371 0DC6                       u291 0F68  
                     u380 085C                       u437 0F4C                       u381 0858  
                     u390 0882                       u447 0FC2                       u391 087E  
                     u457 0E86                       u467 0EA2                       u477 0EBE  
                     _key 001C                       wreg 000FE8           __end_of_LCD_cmd 1020  
                    l2010 0A6C                      l2012 0AC6                      l2014 0B20  
                    l2006 0984                      l2016 0BFE                      l2008 0A12  
                    l2018 0F1C                      l1430 0FB2                      l1440 1016  
                    l1432 0FB4                      l1600 0EE6                      l1504 0A52  
                    l1512 0A58                      l1442 101A                      l1434 0FB6  
                    l1426 0FA8                      l1450 0F84                      l1602 0EF6  
                    l1522 0AA0                      l1514 0A92                      l1444 101C  
                    l1700 0EAE                      l1620 0C6A                      l1612 0FD0  
                    l1436 0FB8                      l1428 0FAE                      l1452 0F88  
                    l1516 0A9A                      l1438 100E                      l1702 0EB4  
                    l1630 0C9A                      l1622 0C78                      l1614 0FEC  
                    l1446 0F70                      l1606 0F06                      l1710 0B68  
                    l1534 0AAC                      l1542 0AB2                      l1462 09EC  
                    l1454 09DE                      l1640 0CC8                      l1632 0C9E  
                    l1624 0C80                      l1448 0F74                      l1720 0BA4  
                    l1712 0B74                      l1704 0B4C                      l1552 0AFA  
                    l1544 0AEC                      l1528 0AA6                      l1456 09E6  
                    l1800 082E                      l1650 0CFC                      l1642 0CD6  
                    l1634 0CA6                      l1626 0C84                      l1618 0C66  
                    l1730 0BDA                      l1722 0BB0                      l1714 0B80  
                    l1706 0B50                      l1546 0AF4                      l1474 09F8  
                    l1482 09FE                      l1810 0862                      l1802 0834  
                    l1652 0D02                      l1644 0CDC                      l1636 0CB8  
                    l1628 0C92                      l1724 0BBC                      l1716 0B8C  
                    l1708 0B5C                      l1564 0B06                      l1572 0B0C  
                    l1492 0A46                      l1484 0A38                      l1468 09F2  
                    l1820 088E                      l1812 0868                      l1804 083A  
                    l1646 0CF2                      l1638 0CC0                      l1654 0D08  
                    l1750 0E06                      l1742 0DE8                      l1726 0BC8  
                    l1718 0B98                      l1574 0B46                      l1558 0B00  
                    l1486 0A40                      l1670 0F42                      l1662 1020  
                    l1830 08CE                      l1822 089C                      l1814 0870  
                    l1806 0848                      l1680 0E66                      l1656 0D18  
                    l1648 0CFA                      l1752 0E18                      l1744 0DFA  
                    l1728 0BCE                      l1736 0BEA                      l1672 0F5A  
                    l1664 102E                      l1840 090C                      l1832 08D8  
                    l1824 08B0                      l1816 0882                      l1808 085C  
                    l1690 0E74                      l1682 0E68                      l1658 0D20  
                    l1770 0D32                      l1754 0E2A                      l1746 0E00  
                    l1498 0A4C                      l1674 0F6C                      l1666 0F34  
                    l1850 0966                      l1842 0928                      l1834 08E8  
                    l1826 08B6                      l1818 0888                      l1692 0E76  
                    l1684 0E6A                      l1780 0D8A                      l1772 0D40  
                    l1596 0ECC                      l1756 0E3C                      l1764 0E5E  
                    l1668 0F3C                      l1860 09C6                      l1844 0934  
                    l1836 08F2                      l1828 08BC                      l1694 0E7C  
                    l1686 0E70                      l1678 0E62                      l1790 0DD2  
                    l1782 0DA2                      l1774 0D48                      l1598 0ED6  
                    l1758 0E4E                      l1846 093E                      l1838 0902  
                    l1854 0970                      l1696 0E92                      l1688 0E72  
                    l1792 0DDC                      l1784 0DB2                      l1776 0D54  
                    l1768 0D2A                      l1848 095A                      l1856 09AA  
                    l1698 0E98                      l1786 0DBA                      l1778 0D6C  
                    l1858 09BC                      l1794 0822                      l1788 0DCA  
                    l1796 0826                      l1798 082A                      STR_1 081E  
                    STR_2 0811                      STR_3 0801                      STR_4 0811  
                    _LATB 000F8A                      _LATC 000F8B                      _LATD 000F8C  
                    _WPUB 000F85                      _main 0822                      _num1 0019  
                    _num2 0017                      _oper 001B                      prodh 000FF4  
                    prodl 000FF3                      start 0000              ___param_bank 000000  
        __end_of_LCD_init 0ECC                     ?_main 0001           __end_of___awdiv 0D2A  
         ___awdiv@divisor 0003              ?_key_scanner 0001           ___awdiv@counter 0005  
                   _PORTB 000F81                     _TRISB 000F93                     _TRISD 000F95  
         __end_of_get_Num 0C66           __end_of_key_get 0F70                     tablat 000FF5  
                   status 000FD8           __initialization 0FF6              __end_of_main 09DE  
                  ??_main 0011             __activetblptr 000002                 ??_LCD_cmd 0001  
            ?_send_to_LCD 0001          ___awdiv@dividend 0001                    _ANSELB 000F5C  
                  _OSCCON 000FD3         disp_Res@UnitDigit 000B          __end_of_get_Func 0E62  
        __end_of_disp_Res 0DE6                    ___wmul 0FD0                 ??___awdiv 0005  
        __end_of_key_init 1032          ___awdiv@quotient 0007                    isa$std 000001  
               ??_get_Num 000C                 ??_key_get 0003              __mediumconst 0000  
                  tblptrh 000FF7                    tblptrl 000FF6                    tblptru 000FF8  
              __accesstop 0060   __end_of__initialization 1002                 ?_LCD_init 0001  
           ___rparam_used 000001            __pcstackCOMRAM 0001                 LCD_cmd@cx 0001  
        _write_string_LCD 0F70                ??_LCD_init 0002                   ?___wmul 0001  
      disp_Res@TenthDigit 000C                _disp_Error 0ECC                   _LCD_cmd 100C  
               ?_get_Func 0001                 ?_disp_Res 0009                 ?_key_init 0001  
                 __Hparam 0000                   __Lparam 0000                   ___awdiv 0C66  
            __psmallconst 0800                   __pcinit 0FF6                   __ramtop 0800  
                 __ptext0 0822                   __ptext1 1020                   __ptext2 0F34  
                 __ptext3 09DE                   __ptext4 0B4A                   __ptext5 0DE6  
                 __ptext6 0ECC                   __ptext7 0D2A                   _get_Num 0B4A  
                 __ptext8 0F70                   __ptext9 0FA6                   _key_get 0F34  
              ??_get_Func 000A                ??_disp_Res 000B      end_of_initialization 1002  
       write_string_LCD@s 0004                ??_key_init 0001             __Lmediumconst 0000  
              get_Num@num 000F               ?_disp_Error 0006                 _TRISCbits 000F94  
__end_of_write_string_LCD 0FA6     disp_Res@HundrethDigit 000D             send_to_LCD@xy 0003  
          __end_of___wmul 0FF6       start_initialization 0FF6                  ??___wmul 0005  
           ??_key_scanner 0001                  ?_LCD_cmd 0001               __pbssCOMRAM 0017  
                ?___awdiv 0001                  ?_get_Num 000A               __smallconst 0800  
                ?_key_get 0001             ??_send_to_LCD 0001       __end_of_key_scanner 0B4A  
          ___wmul@product 0005                  _LATCbits 000F8B                  _LCD_init 0E62  
               get_Num@ch 000E         ___wmul@multiplier 0001              ??_disp_Error 0008  
             _INTCON2bits 000FF1         ?_write_string_LCD 0004       __end_of_send_to_LCD 0FD0  
      ??_write_string_LCD 0006                  __Hrparam 0000        __end_of_disp_Error 0F34  
                __Lrparam 0000               _key_scanner 09DE                  _main$871 0013  
                _main$872 0015                  __ptext10 0FD0                  __ptext11 0C66  
                _get_Func 0DE6                  __ptext12 0E62                  __ptext13 100C  
                _disp_Res 0D2A                  _key_init 1020                  isa$xinst 000000  
             _send_to_LCD 0FA6               get_Func@chf 000A  
